/*  Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

    Licensed under the MIT license.

    Copyright 2016 Xamarin Inc

    This notice may not be removed from any source distribution.
    See LICENSE file for licensing details.
*/

using System;

namespace Vulkan.Interop
{
    internal partial struct BaseOutStructure
    {
        internal StructureType SType;
        internal IntPtr Next;
    }

    internal partial struct BaseInStructure
    {
        internal StructureType SType;
        internal IntPtr Next;
    }

    internal partial struct PhysicalDeviceProperties
    {
        internal UInt32 ApiVersion;
        internal UInt32 DriverVersion;
        internal UInt32 VendorId;
        internal UInt32 DeviceId;
        internal PhysicalDeviceType DeviceType;
        internal unsafe fixed byte DeviceName[256];
        internal unsafe fixed byte PipelineCacheUuid[16];
        internal PhysicalDeviceLimits Limits;
        internal PhysicalDeviceSparseProperties SparseProperties;
    }

    internal partial struct ExtensionProperties
    {
        /// <summary>
        /// extension name
        /// </summary>
        internal unsafe fixed byte ExtensionName[256];
        /// <summary>
        /// version of the extension specification implemented
        /// </summary>
        internal UInt32 SpecVersion;
    }

    internal partial struct LayerProperties
    {
        /// <summary>
        /// layer name
        /// </summary>
        internal unsafe fixed byte LayerName[256];
        /// <summary>
        /// version of the layer specification implemented
        /// </summary>
        internal UInt32 SpecVersion;
        /// <summary>
        /// build or release version of the layer's library
        /// </summary>
        internal UInt32 ImplementationVersion;
        /// <summary>
        /// Free-form description of the layer
        /// </summary>
        internal unsafe fixed byte Description[256];
    }

    internal partial struct ApplicationInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal IntPtr ApplicationName;
        internal UInt32 ApplicationVersion;
        internal IntPtr EngineName;
        internal UInt32 EngineVersion;
        internal UInt32 ApiVersion;
    }

    internal partial struct AllocationCallbacks
    {
        internal IntPtr UserData;
        internal IntPtr PfnAllocation;
        internal IntPtr PfnReallocation;
        internal IntPtr PfnFree;
        internal IntPtr PfnInternalAllocation;
        internal IntPtr PfnInternalFree;
    }

    internal partial struct DeviceQueueCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceQueueCreateFlags Flags;
        internal UInt32 QueueFamilyIndex;
        internal UInt32 QueueCount;
        internal IntPtr QueuePriorities;
    }

    internal partial struct DeviceCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceCreateFlags Flags;
        internal UInt32 QueueCreateInfoCount;
        internal IntPtr QueueCreateInfos;
        internal UInt32 EnabledLayerCount;
        /// <summary>
        /// Ordered list of layer names to be enabled
        /// </summary>
        internal IntPtr EnabledLayerNames;
        internal UInt32 EnabledExtensionCount;
        internal IntPtr EnabledExtensionNames;
        internal IntPtr EnabledFeatures;
    }

    internal partial struct InstanceCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal InstanceCreateFlags Flags;
        internal IntPtr ApplicationInfo;
        internal UInt32 EnabledLayerCount;
        /// <summary>
        /// Ordered list of layer names to be enabled
        /// </summary>
        internal IntPtr EnabledLayerNames;
        internal UInt32 EnabledExtensionCount;
        /// <summary>
        /// Extension names to be enabled
        /// </summary>
        internal IntPtr EnabledExtensionNames;
    }

    internal partial struct PhysicalDeviceMemoryProperties
    {
        internal UInt32 MemoryTypeCount;
        internal MemoryType MemoryTypes0;
        internal MemoryType MemoryTypes1;
        internal MemoryType MemoryTypes2;
        internal MemoryType MemoryTypes3;
        internal MemoryType MemoryTypes4;
        internal MemoryType MemoryTypes5;
        internal MemoryType MemoryTypes6;
        internal MemoryType MemoryTypes7;
        internal MemoryType MemoryTypes8;
        internal MemoryType MemoryTypes9;
        internal MemoryType MemoryTypes10;
        internal MemoryType MemoryTypes11;
        internal MemoryType MemoryTypes12;
        internal MemoryType MemoryTypes13;
        internal MemoryType MemoryTypes14;
        internal MemoryType MemoryTypes15;
        internal MemoryType MemoryTypes16;
        internal MemoryType MemoryTypes17;
        internal MemoryType MemoryTypes18;
        internal MemoryType MemoryTypes19;
        internal MemoryType MemoryTypes20;
        internal MemoryType MemoryTypes21;
        internal MemoryType MemoryTypes22;
        internal MemoryType MemoryTypes23;
        internal MemoryType MemoryTypes24;
        internal MemoryType MemoryTypes25;
        internal MemoryType MemoryTypes26;
        internal MemoryType MemoryTypes27;
        internal MemoryType MemoryTypes28;
        internal MemoryType MemoryTypes29;
        internal MemoryType MemoryTypes30;
        internal MemoryType MemoryTypes31;
        internal UInt32 MemoryHeapCount;
        internal MemoryHeap MemoryHeaps0;
        internal MemoryHeap MemoryHeaps1;
        internal MemoryHeap MemoryHeaps2;
        internal MemoryHeap MemoryHeaps3;
        internal MemoryHeap MemoryHeaps4;
        internal MemoryHeap MemoryHeaps5;
        internal MemoryHeap MemoryHeaps6;
        internal MemoryHeap MemoryHeaps7;
        internal MemoryHeap MemoryHeaps8;
        internal MemoryHeap MemoryHeaps9;
        internal MemoryHeap MemoryHeaps10;
        internal MemoryHeap MemoryHeaps11;
        internal MemoryHeap MemoryHeaps12;
        internal MemoryHeap MemoryHeaps13;
        internal MemoryHeap MemoryHeaps14;
        internal MemoryHeap MemoryHeaps15;
    }

    internal partial struct MemoryAllocateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Size of memory allocation
        /// </summary>
        internal DeviceSize AllocationSize;
        /// <summary>
        /// Index of the of the memory type to allocate from
        /// </summary>
        internal UInt32 MemoryTypeIndex;
    }

    internal partial struct MappedMemoryRange
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Mapped memory object
        /// </summary>
        internal UInt64 Memory;
        /// <summary>
        /// Offset within the memory object where the range starts
        /// </summary>
        internal DeviceSize Offset;
        /// <summary>
        /// Size of the range within the memory object
        /// </summary>
        internal DeviceSize Size;
    }

    internal partial struct DescriptorBufferInfo
    {
        /// <summary>
        /// Buffer used for this descriptor slot.
        /// </summary>
        internal UInt64 Buffer;
        /// <summary>
        /// Base offset from buffer start in bytes to update in the descriptor set.
        /// </summary>
        internal DeviceSize Offset;
        /// <summary>
        /// Size in bytes of the buffer resource for this descriptor update.
        /// </summary>
        internal DeviceSize Range;
    }

    internal partial struct DescriptorImageInfo
    {
        /// <summary>
        /// Sampler to write to the descriptor in case it is a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise.
        /// </summary>
        internal UInt64 Sampler;
        /// <summary>
        /// Image view to write to the descriptor in case it is a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise.
        /// </summary>
        internal UInt64 ImageView;
        /// <summary>
        /// Layout the image is expected to be in when accessed using this descriptor(only used if imageView is not VK_NULL_HANDLE).
        /// </summary>
        internal ImageLayout ImageLayout;
    }

    internal partial struct WriteDescriptorSet
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Destination descriptor set
        /// </summary>
        internal UInt64 DstSet;
        /// <summary>
        /// Binding within the destination descriptor set to write
        /// </summary>
        internal UInt32 DstBinding;
        /// <summary>
        /// Array element within the destination binding to write
        /// </summary>
        internal UInt32 DstArrayElement;
        /// <summary>
        /// Number of descriptors to write(determines the size of the array pointed by pDescriptors)
        /// </summary>
        internal UInt32 DescriptorCount;
        /// <summary>
        /// Descriptor type to write(determines which members of the array pointed by pDescriptors are going to be used)
        /// </summary>
        internal DescriptorType DescriptorType;
        /// <summary>
        /// Sampler, image view, and layout for SAMPLER, COMBINED_IMAGE_SAMPLER, {SAMPLED,STORAGE}_IMAGE, and INPUT_ATTACHMENT descriptor types.
        /// </summary>
        internal IntPtr ImageInfo;
        /// <summary>
        /// Raw buffer, size, and offset for {UNIFORM,STORAGE}_BUFFER[_DYNAMIC] descriptor types.
        /// </summary>
        internal IntPtr BufferInfo;
        /// <summary>
        /// Buffer view to write to the descriptor for {UNIFORM,STORAGE}_TEXEL_BUFFER descriptor types.
        /// </summary>
        internal IntPtr TexelBufferView;
    }

    internal partial struct CopyDescriptorSet
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Source descriptor set
        /// </summary>
        internal UInt64 SrcSet;
        /// <summary>
        /// Binding within the source descriptor set to copy from
        /// </summary>
        internal UInt32 SrcBinding;
        /// <summary>
        /// Array element within the source binding to copy from
        /// </summary>
        internal UInt32 SrcArrayElement;
        /// <summary>
        /// Destination descriptor set
        /// </summary>
        internal UInt64 DstSet;
        /// <summary>
        /// Binding within the destination descriptor set to copy to
        /// </summary>
        internal UInt32 DstBinding;
        /// <summary>
        /// Array element within the destination binding to copy to
        /// </summary>
        internal UInt32 DstArrayElement;
        /// <summary>
        /// Number of descriptors to write(determines the size of the array pointed by pDescriptors)
        /// </summary>
        internal UInt32 DescriptorCount;
    }

    internal partial struct BufferCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Buffer creation flags
        /// </summary>
        internal BufferCreateFlags Flags;
        /// <summary>
        /// Specified in bytes
        /// </summary>
        internal DeviceSize Size;
        /// <summary>
        /// Buffer usage flags
        /// </summary>
        internal BufferUsageFlags Usage;
        internal SharingMode SharingMode;
        internal UInt32 QueueFamilyIndexCount;
        internal IntPtr QueueFamilyIndices;
    }

    internal partial struct BufferViewCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal BufferViewCreateFlags Flags;
        internal UInt64 Buffer;
        /// <summary>
        /// Optionally specifies format of elements
        /// </summary>
        internal Format Format;
        /// <summary>
        /// Specified in bytes
        /// </summary>
        internal DeviceSize Offset;
        /// <summary>
        /// View size specified in bytes
        /// </summary>
        internal DeviceSize Range;
    }

    internal partial struct MemoryBarrier
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Memory accesses from the source of the dependency to synchronize
        /// </summary>
        internal AccessFlags SrcAccessMask;
        /// <summary>
        /// Memory accesses from the destination of the dependency to synchronize
        /// </summary>
        internal AccessFlags DstAccessMask;
    }

    internal partial struct BufferMemoryBarrier
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Memory accesses from the source of the dependency to synchronize
        /// </summary>
        internal AccessFlags SrcAccessMask;
        /// <summary>
        /// Memory accesses from the destination of the dependency to synchronize
        /// </summary>
        internal AccessFlags DstAccessMask;
        /// <summary>
        /// Queue family to transition ownership from
        /// </summary>
        internal UInt32 SrcQueueFamilyIndex;
        /// <summary>
        /// Queue family to transition ownership to
        /// </summary>
        internal UInt32 DstQueueFamilyIndex;
        /// <summary>
        /// Buffer to sync
        /// </summary>
        internal UInt64 Buffer;
        /// <summary>
        /// Offset within the buffer to sync
        /// </summary>
        internal DeviceSize Offset;
        /// <summary>
        /// Amount of bytes to sync
        /// </summary>
        internal DeviceSize Size;
    }

    internal partial struct ImageMemoryBarrier
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Memory accesses from the source of the dependency to synchronize
        /// </summary>
        internal AccessFlags SrcAccessMask;
        /// <summary>
        /// Memory accesses from the destination of the dependency to synchronize
        /// </summary>
        internal AccessFlags DstAccessMask;
        /// <summary>
        /// Current layout of the image
        /// </summary>
        internal ImageLayout OldLayout;
        /// <summary>
        /// New layout to transition the image to
        /// </summary>
        internal ImageLayout NewLayout;
        /// <summary>
        /// Queue family to transition ownership from
        /// </summary>
        internal UInt32 SrcQueueFamilyIndex;
        /// <summary>
        /// Queue family to transition ownership to
        /// </summary>
        internal UInt32 DstQueueFamilyIndex;
        /// <summary>
        /// Image to sync
        /// </summary>
        internal UInt64 Image;
        /// <summary>
        /// Subresource range to sync
        /// </summary>
        internal ImageSubresourceRange SubresourceRange;
    }

    internal partial struct ImageCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Image creation flags
        /// </summary>
        internal ImageCreateFlags Flags;
        internal ImageType ImageType;
        internal Format Format;
        internal Extent3D Extent;
        internal UInt32 MipLevels;
        internal UInt32 ArrayLayers;
        internal SampleCountFlags Samples;
        internal ImageTiling Tiling;
        /// <summary>
        /// Image usage flags
        /// </summary>
        internal ImageUsageFlags Usage;
        /// <summary>
        /// Cross-queue-family sharing mode
        /// </summary>
        internal SharingMode SharingMode;
        /// <summary>
        /// Number of queue families to share across
        /// </summary>
        internal UInt32 QueueFamilyIndexCount;
        /// <summary>
        /// Array of queue family indices to share across
        /// </summary>
        internal IntPtr QueueFamilyIndices;
        /// <summary>
        /// Initial image layout for all subresources
        /// </summary>
        internal ImageLayout InitialLayout;
    }

    internal partial struct ImageViewCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ImageViewCreateFlags Flags;
        internal UInt64 Image;
        internal ImageViewType ViewType;
        internal Format Format;
        internal ComponentMapping Components;
        internal ImageSubresourceRange SubresourceRange;
    }

    internal partial struct SparseMemoryBind
    {
        /// <summary>
        /// Specified in bytes
        /// </summary>
        internal DeviceSize ResourceOffset;
        /// <summary>
        /// Specified in bytes
        /// </summary>
        internal DeviceSize Size;
        internal UInt64 Memory;
        /// <summary>
        /// Specified in bytes
        /// </summary>
        internal DeviceSize MemoryOffset;
        internal SparseMemoryBindFlags Flags;
    }

    internal partial struct SparseImageMemoryBind
    {
        internal ImageSubresource Subresource;
        internal Offset3D Offset;
        internal Extent3D Extent;
        internal UInt64 Memory;
        /// <summary>
        /// Specified in bytes
        /// </summary>
        internal DeviceSize MemoryOffset;
        internal SparseMemoryBindFlags Flags;
    }

    internal partial struct SparseBufferMemoryBindInfo
    {
        internal UInt64 Buffer;
        internal UInt32 BindCount;
        internal IntPtr Binds;
    }

    internal partial struct SparseImageOpaqueMemoryBindInfo
    {
        internal UInt64 Image;
        internal UInt32 BindCount;
        internal IntPtr Binds;
    }

    internal partial struct SparseImageMemoryBindInfo
    {
        internal UInt64 Image;
        internal UInt32 BindCount;
        internal IntPtr Binds;
    }

    internal partial struct BindSparseInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 WaitSemaphoreCount;
        internal IntPtr WaitSemaphores;
        internal UInt32 BufferBindCount;
        internal IntPtr BufferBinds;
        internal UInt32 ImageOpaqueBindCount;
        internal IntPtr ImageOpaqueBinds;
        internal UInt32 ImageBindCount;
        internal IntPtr ImageBinds;
        internal UInt32 SignalSemaphoreCount;
        internal IntPtr SignalSemaphores;
    }

    internal partial struct ImageBlit
    {
        internal ImageSubresourceLayers SrcSubresource;
        /// <summary>
        /// Specified in pixels for both compressed and uncompressed images
        /// </summary>
        internal Offset3D SrcOffsets0;
        internal Offset3D SrcOffsets1;
        internal ImageSubresourceLayers DstSubresource;
        /// <summary>
        /// Specified in pixels for both compressed and uncompressed images
        /// </summary>
        internal Offset3D DstOffsets0;
        internal Offset3D DstOffsets1;
    }

    internal partial struct ShaderModuleCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ShaderModuleCreateFlags Flags;
        /// <summary>
        /// Specified in bytes
        /// </summary>
        internal UIntPtr CodeSize;
        /// <summary>
        /// Binary code of size codeSize
        /// </summary>
        internal IntPtr Code;
    }

    internal partial struct DescriptorSetLayoutBinding
    {
        /// <summary>
        /// Binding number for this entry
        /// </summary>
        internal UInt32 Binding;
        /// <summary>
        /// Type of the descriptors in this binding
        /// </summary>
        internal DescriptorType DescriptorType;
        /// <summary>
        /// Number of descriptors in this binding
        /// </summary>
        internal UInt32 DescriptorCount;
        /// <summary>
        /// Shader stages this binding is visible to
        /// </summary>
        internal ShaderStageFlags StageFlags;
        /// <summary>
        /// Immutable samplers(used if descriptor type is SAMPLER or COMBINED_IMAGE_SAMPLER, is either NULL or contains count number of elements)
        /// </summary>
        internal IntPtr ImmutableSamplers;
    }

    internal partial struct DescriptorSetLayoutCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DescriptorSetLayoutCreateFlags Flags;
        /// <summary>
        /// Number of bindings in the descriptor set layout
        /// </summary>
        internal UInt32 BindingCount;
        /// <summary>
        /// Array of descriptor set layout bindings
        /// </summary>
        internal IntPtr Bindings;
    }

    internal partial struct DescriptorPoolCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DescriptorPoolCreateFlags Flags;
        internal UInt32 MaxSets;
        internal UInt32 PoolSizeCount;
        internal IntPtr PoolSizes;
    }

    internal partial struct DescriptorSetAllocateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 DescriptorPool;
        internal UInt32 DescriptorSetCount;
        internal IntPtr SetLayouts;
    }

    internal partial struct SpecializationInfo
    {
        /// <summary>
        /// Number of entries in the map
        /// </summary>
        internal UInt32 MapEntryCount;
        /// <summary>
        /// Array of map entries
        /// </summary>
        internal IntPtr MapEntries;
        /// <summary>
        /// Size in bytes of pData
        /// </summary>
        internal UIntPtr DataSize;
        /// <summary>
        /// Pointer to SpecConstant data
        /// </summary>
        internal IntPtr Data;
    }

    internal partial struct PipelineShaderStageCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineShaderStageCreateFlags Flags;
        /// <summary>
        /// Shader stage
        /// </summary>
        internal ShaderStageFlags Stage;
        /// <summary>
        /// Module containing entry point
        /// </summary>
        internal UInt64 Module;
        /// <summary>
        /// Null-terminated entry point name
        /// </summary>
        internal IntPtr Name;
        internal IntPtr SpecializationInfo;
    }

    internal partial struct ComputePipelineCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Pipeline creation flags
        /// </summary>
        internal PipelineCreateFlags Flags;
        internal PipelineShaderStageCreateInfo Stage;
        /// <summary>
        /// Interface layout of the pipeline
        /// </summary>
        internal UInt64 Layout;
        /// <summary>
        /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
        /// </summary>
        internal UInt64 BasePipelineHandle;
        /// <summary>
        /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
        /// </summary>
        internal Int32 BasePipelineIndex;
    }

    internal partial struct PipelineVertexInputStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineVertexInputStateCreateFlags Flags;
        /// <summary>
        /// number of bindings
        /// </summary>
        internal UInt32 VertexBindingDescriptionCount;
        internal IntPtr VertexBindingDescriptions;
        /// <summary>
        /// number of attributes
        /// </summary>
        internal UInt32 VertexAttributeDescriptionCount;
        internal IntPtr VertexAttributeDescriptions;
    }

    internal partial struct PipelineInputAssemblyStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineInputAssemblyStateCreateFlags Flags;
        internal PrimitiveTopology Topology;
        internal Bool32 PrimitiveRestartEnable;
    }

    internal partial struct PipelineTessellationStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineTessellationStateCreateFlags Flags;
        internal UInt32 PatchControlPoints;
    }

    internal partial struct PipelineViewportStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineViewportStateCreateFlags Flags;
        internal UInt32 ViewportCount;
        internal IntPtr Viewports;
        internal UInt32 ScissorCount;
        internal IntPtr Scissors;
    }

    internal partial struct PipelineRasterizationStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineRasterizationStateCreateFlags Flags;
        internal Bool32 DepthClampEnable;
        internal Bool32 RasterizerDiscardEnable;
        /// <summary>
        /// optional(GL45)
        /// </summary>
        internal PolygonMode PolygonMode;
        internal CullModeFlags CullMode;
        internal FrontFace FrontFace;
        internal Bool32 DepthBiasEnable;
        internal float DepthBiasConstantFactor;
        internal float DepthBiasClamp;
        internal float DepthBiasSlopeFactor;
        internal float LineWidth;
    }

    internal partial struct PipelineMultisampleStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineMultisampleStateCreateFlags Flags;
        /// <summary>
        /// Number of samples used for rasterization
        /// </summary>
        internal SampleCountFlags RasterizationSamples;
        /// <summary>
        /// optional(GL45)
        /// </summary>
        internal Bool32 SampleShadingEnable;
        /// <summary>
        /// optional(GL45)
        /// </summary>
        internal float MinSampleShading;
        /// <summary>
        /// Array of sampleMask words
        /// </summary>
        internal IntPtr SampleMask;
        internal Bool32 AlphaToCoverageEnable;
        internal Bool32 AlphaToOneEnable;
    }

    internal partial struct PipelineColorBlendStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineColorBlendStateCreateFlags Flags;
        internal Bool32 LogicOpEnable;
        internal LogicOp LogicOp;
        /// <summary>
        /// # of pAttachments
        /// </summary>
        internal UInt32 AttachmentCount;
        internal IntPtr Attachments;
        internal unsafe fixed float BlendConstants[4];
    }

    internal partial struct PipelineDynamicStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineDynamicStateCreateFlags Flags;
        internal UInt32 DynamicStateCount;
        internal IntPtr DynamicStates;
    }

    internal partial struct PipelineDepthStencilStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineDepthStencilStateCreateFlags Flags;
        internal Bool32 DepthTestEnable;
        internal Bool32 DepthWriteEnable;
        internal CompareOp DepthCompareOp;
        /// <summary>
        /// optional(depth_bounds_test)
        /// </summary>
        internal Bool32 DepthBoundsTestEnable;
        internal Bool32 StencilTestEnable;
        internal StencilOpState Front;
        internal StencilOpState Back;
        internal float MinDepthBounds;
        internal float MaxDepthBounds;
    }

    internal partial struct GraphicsPipelineCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Pipeline creation flags
        /// </summary>
        internal PipelineCreateFlags Flags;
        internal UInt32 StageCount;
        /// <summary>
        /// One entry for each active shader stage
        /// </summary>
        internal IntPtr Stages;
        internal IntPtr VertexInputState;
        internal IntPtr InputAssemblyState;
        internal IntPtr TessellationState;
        internal IntPtr ViewportState;
        internal IntPtr RasterizationState;
        internal IntPtr MultisampleState;
        internal IntPtr DepthStencilState;
        internal IntPtr ColorBlendState;
        internal IntPtr DynamicState;
        /// <summary>
        /// Interface layout of the pipeline
        /// </summary>
        internal UInt64 Layout;
        internal UInt64 RenderPass;
        internal UInt32 Subpass;
        /// <summary>
        /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
        /// </summary>
        internal UInt64 BasePipelineHandle;
        /// <summary>
        /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
        /// </summary>
        internal Int32 BasePipelineIndex;
    }

    internal partial struct PipelineCacheCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineCacheCreateFlags Flags;
        /// <summary>
        /// Size of initial data to populate cache, in bytes
        /// </summary>
        internal UIntPtr InitialDataSize;
        /// <summary>
        /// Initial data to populate cache
        /// </summary>
        internal IntPtr InitialData;
    }

    internal partial struct PipelineLayoutCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineLayoutCreateFlags Flags;
        /// <summary>
        /// Number of descriptor sets interfaced by the pipeline
        /// </summary>
        internal UInt32 SetLayoutCount;
        /// <summary>
        /// Array of setCount number of descriptor set layout objects defining the layout of the
        /// </summary>
        internal IntPtr SetLayouts;
        /// <summary>
        /// Number of push-constant ranges used by the pipeline
        /// </summary>
        internal UInt32 PushConstantRangeCount;
        /// <summary>
        /// Array of pushConstantRangeCount number of ranges used by various shader stages
        /// </summary>
        internal IntPtr PushConstantRanges;
    }

    internal partial struct SamplerCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SamplerCreateFlags Flags;
        /// <summary>
        /// Filter mode for magnification
        /// </summary>
        internal Filter MagFilter;
        /// <summary>
        /// Filter mode for minifiation
        /// </summary>
        internal Filter MinFilter;
        /// <summary>
        /// Mipmap selection mode
        /// </summary>
        internal SamplerMipmapMode MipmapMode;
        internal SamplerAddressMode AddressModeU;
        internal SamplerAddressMode AddressModeV;
        internal SamplerAddressMode AddressModeW;
        internal float MipLodBias;
        internal Bool32 AnisotropyEnable;
        internal float MaxAnisotropy;
        internal Bool32 CompareEnable;
        internal CompareOp CompareOp;
        internal float MinLod;
        internal float MaxLod;
        internal BorderColor BorderColor;
        internal Bool32 UnnormalizedCoordinates;
    }

    internal partial struct CommandPoolCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Command pool creation flags
        /// </summary>
        internal CommandPoolCreateFlags Flags;
        internal UInt32 QueueFamilyIndex;
    }

    internal partial struct CommandBufferAllocateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 CommandPool;
        internal CommandBufferLevel Level;
        internal UInt32 CommandBufferCount;
    }

    internal partial struct CommandBufferInheritanceInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Render pass for secondary command buffers
        /// </summary>
        internal UInt64 RenderPass;
        internal UInt32 Subpass;
        /// <summary>
        /// Framebuffer for secondary command buffers
        /// </summary>
        internal UInt64 Framebuffer;
        /// <summary>
        /// Whether this secondary command buffer may be executed during an occlusion query
        /// </summary>
        internal Bool32 OcclusionQueryEnable;
        /// <summary>
        /// Query flags used by this secondary command buffer, if executed during an occlusion query
        /// </summary>
        internal QueryControlFlags QueryFlags;
        /// <summary>
        /// Pipeline statistics that may be counted for this secondary command buffer
        /// </summary>
        internal QueryPipelineStatisticFlags PipelineStatistics;
    }

    internal partial struct CommandBufferBeginInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Command buffer usage flags
        /// </summary>
        internal CommandBufferUsageFlags Flags;
        /// <summary>
        /// Pointer to inheritance info for secondary command buffers
        /// </summary>
        internal IntPtr InheritanceInfo;
    }

    internal partial struct RenderPassBeginInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 RenderPass;
        internal UInt64 Framebuffer;
        internal Rect2D RenderArea;
        internal UInt32 ClearValueCount;
        internal IntPtr ClearValues;
    }

    internal partial struct ClearAttachment
    {
        internal ImageAspectFlags AspectMask;
        internal UInt32 ColorAttachment;
        internal ClearValue ClearValue;
    }

    internal partial struct SubpassDescription
    {
        internal SubpassDescriptionFlags Flags;
        /// <summary>
        /// Must be VK_PIPELINE_BIND_POINT_GRAPHICS for now
        /// </summary>
        internal PipelineBindPoint PipelineBindPoint;
        internal UInt32 InputAttachmentCount;
        internal IntPtr InputAttachments;
        internal UInt32 ColorAttachmentCount;
        internal IntPtr ColorAttachments;
        internal IntPtr ResolveAttachments;
        internal IntPtr DepthStencilAttachment;
        internal UInt32 PreserveAttachmentCount;
        internal IntPtr PreserveAttachments;
    }

    internal partial struct RenderPassCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal RenderPassCreateFlags Flags;
        internal UInt32 AttachmentCount;
        internal IntPtr Attachments;
        internal UInt32 SubpassCount;
        internal IntPtr Subpasses;
        internal UInt32 DependencyCount;
        internal IntPtr Dependencies;
    }

    internal partial struct EventCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Event creation flags
        /// </summary>
        internal EventCreateFlags Flags;
    }

    internal partial struct FenceCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Fence creation flags
        /// </summary>
        internal FenceCreateFlags Flags;
    }

    internal partial struct PhysicalDeviceLimits
    {
        /// <summary>
        /// max 1D image dimension
        /// </summary>
        internal UInt32 MaxImageDimension1D;
        /// <summary>
        /// max 2D image dimension
        /// </summary>
        internal UInt32 MaxImageDimension2D;
        /// <summary>
        /// max 3D image dimension
        /// </summary>
        internal UInt32 MaxImageDimension3D;
        /// <summary>
        /// max cubemap image dimension
        /// </summary>
        internal UInt32 MaxImageDimensionCube;
        /// <summary>
        /// max layers for image arrays
        /// </summary>
        internal UInt32 MaxImageArrayLayers;
        /// <summary>
        /// max texel buffer size(fstexels)
        /// </summary>
        internal UInt32 MaxTexelBufferElements;
        /// <summary>
        /// max uniform buffer range(bytes)
        /// </summary>
        internal UInt32 MaxUniformBufferRange;
        /// <summary>
        /// max storage buffer range(bytes)
        /// </summary>
        internal UInt32 MaxStorageBufferRange;
        /// <summary>
        /// max size of the push constants pool(bytes)
        /// </summary>
        internal UInt32 MaxPushConstantsSize;
        /// <summary>
        /// max number of device memory allocations supported
        /// </summary>
        internal UInt32 MaxMemoryAllocationCount;
        /// <summary>
        /// max number of samplers that can be allocated on a device
        /// </summary>
        internal UInt32 MaxSamplerAllocationCount;
        /// <summary>
        /// Granularity(in bytes) at which buffers and images can be bound to adjacent memory for simultaneous usage
        /// </summary>
        internal DeviceSize BufferImageGranularity;
        /// <summary>
        /// Total address space available for sparse allocations(bytes)
        /// </summary>
        internal DeviceSize SparseAddressSpaceSize;
        /// <summary>
        /// max number of descriptors sets that can be bound to a pipeline
        /// </summary>
        internal UInt32 MaxBoundDescriptorSets;
        /// <summary>
        /// max number of samplers allowed per-stage in a descriptor set
        /// </summary>
        internal UInt32 MaxPerStageDescriptorSamplers;
        /// <summary>
        /// max number of uniform buffers allowed per-stage in a descriptor set
        /// </summary>
        internal UInt32 MaxPerStageDescriptorUniformBuffers;
        /// <summary>
        /// max number of storage buffers allowed per-stage in a descriptor set
        /// </summary>
        internal UInt32 MaxPerStageDescriptorStorageBuffers;
        /// <summary>
        /// max number of sampled images allowed per-stage in a descriptor set
        /// </summary>
        internal UInt32 MaxPerStageDescriptorSampledImages;
        /// <summary>
        /// max number of storage images allowed per-stage in a descriptor set
        /// </summary>
        internal UInt32 MaxPerStageDescriptorStorageImages;
        /// <summary>
        /// max number of input attachments allowed per-stage in a descriptor set
        /// </summary>
        internal UInt32 MaxPerStageDescriptorInputAttachments;
        /// <summary>
        /// max number of resources allowed by a single stage
        /// </summary>
        internal UInt32 MaxPerStageResources;
        /// <summary>
        /// max number of samplers allowed in all stages in a descriptor set
        /// </summary>
        internal UInt32 MaxDescriptorSetSamplers;
        /// <summary>
        /// max number of uniform buffers allowed in all stages in a descriptor set
        /// </summary>
        internal UInt32 MaxDescriptorSetUniformBuffers;
        /// <summary>
        /// max number of dynamic uniform buffers allowed in all stages in a descriptor set
        /// </summary>
        internal UInt32 MaxDescriptorSetUniformBuffersDynamic;
        /// <summary>
        /// max number of storage buffers allowed in all stages in a descriptor set
        /// </summary>
        internal UInt32 MaxDescriptorSetStorageBuffers;
        /// <summary>
        /// max number of dynamic storage buffers allowed in all stages in a descriptor set
        /// </summary>
        internal UInt32 MaxDescriptorSetStorageBuffersDynamic;
        /// <summary>
        /// max number of sampled images allowed in all stages in a descriptor set
        /// </summary>
        internal UInt32 MaxDescriptorSetSampledImages;
        /// <summary>
        /// max number of storage images allowed in all stages in a descriptor set
        /// </summary>
        internal UInt32 MaxDescriptorSetStorageImages;
        /// <summary>
        /// max number of input attachments allowed in all stages in a descriptor set
        /// </summary>
        internal UInt32 MaxDescriptorSetInputAttachments;
        /// <summary>
        /// max number of vertex input attribute slots
        /// </summary>
        internal UInt32 MaxVertexInputAttributes;
        /// <summary>
        /// max number of vertex input binding slots
        /// </summary>
        internal UInt32 MaxVertexInputBindings;
        /// <summary>
        /// max vertex input attribute offset added to vertex buffer offset
        /// </summary>
        internal UInt32 MaxVertexInputAttributeOffset;
        /// <summary>
        /// max vertex input binding stride
        /// </summary>
        internal UInt32 MaxVertexInputBindingStride;
        /// <summary>
        /// max number of output components written by vertex shader
        /// </summary>
        internal UInt32 MaxVertexOutputComponents;
        /// <summary>
        /// max level supported by tessellation primitive generator
        /// </summary>
        internal UInt32 MaxTessellationGenerationLevel;
        /// <summary>
        /// max patch size(vertices)
        /// </summary>
        internal UInt32 MaxTessellationPatchSize;
        /// <summary>
        /// max number of input components per-vertex in TCS
        /// </summary>
        internal UInt32 MaxTessellationControlPerVertexInputComponents;
        /// <summary>
        /// max number of output components per-vertex in TCS
        /// </summary>
        internal UInt32 MaxTessellationControlPerVertexOutputComponents;
        /// <summary>
        /// max number of output components per-patch in TCS
        /// </summary>
        internal UInt32 MaxTessellationControlPerPatchOutputComponents;
        /// <summary>
        /// max total number of per-vertex and per-patch output components in TCS
        /// </summary>
        internal UInt32 MaxTessellationControlTotalOutputComponents;
        /// <summary>
        /// max number of input components per vertex in TES
        /// </summary>
        internal UInt32 MaxTessellationEvaluationInputComponents;
        /// <summary>
        /// max number of output components per vertex in TES
        /// </summary>
        internal UInt32 MaxTessellationEvaluationOutputComponents;
        /// <summary>
        /// max invocation count supported in geometry shader
        /// </summary>
        internal UInt32 MaxGeometryShaderInvocations;
        /// <summary>
        /// max number of input components read in geometry stage
        /// </summary>
        internal UInt32 MaxGeometryInputComponents;
        /// <summary>
        /// max number of output components written in geometry stage
        /// </summary>
        internal UInt32 MaxGeometryOutputComponents;
        /// <summary>
        /// max number of vertices that can be emitted in geometry stage
        /// </summary>
        internal UInt32 MaxGeometryOutputVertices;
        /// <summary>
        /// max total number of components(all vertices) written in geometry stage
        /// </summary>
        internal UInt32 MaxGeometryTotalOutputComponents;
        /// <summary>
        /// max number of input components read in fragment stage
        /// </summary>
        internal UInt32 MaxFragmentInputComponents;
        /// <summary>
        /// max number of output attachments written in fragment stage
        /// </summary>
        internal UInt32 MaxFragmentOutputAttachments;
        /// <summary>
        /// max number of output attachments written when using dual source blending
        /// </summary>
        internal UInt32 MaxFragmentDualSrcAttachments;
        /// <summary>
        /// max total number of storage buffers, storage images and output buffers
        /// </summary>
        internal UInt32 MaxFragmentCombinedOutputResources;
        /// <summary>
        /// max total storage size of work group local storage(bytes)
        /// </summary>
        internal UInt32 MaxComputeSharedMemorySize;
        /// <summary>
        /// max num of compute work groups that may be dispatched by a single command(x,y,z)
        /// </summary>
        internal unsafe fixed UInt32 MaxComputeWorkGroupCount[3];
        /// <summary>
        /// max total compute invocations in a single local work group
        /// </summary>
        internal UInt32 MaxComputeWorkGroupInvocations;
        /// <summary>
        /// max local size of a compute work group(x,y,z)
        /// </summary>
        internal unsafe fixed UInt32 MaxComputeWorkGroupSize[3];
        /// <summary>
        /// number bits of subpixel precision in screen x and y
        /// </summary>
        internal UInt32 SubPixelPrecisionBits;
        /// <summary>
        /// number bits of precision for selecting texel weights
        /// </summary>
        internal UInt32 SubTexelPrecisionBits;
        /// <summary>
        /// number bits of precision for selecting mipmap weights
        /// </summary>
        internal UInt32 MipmapPrecisionBits;
        /// <summary>
        /// max index value for indexed draw calls(for 32-bit indices)
        /// </summary>
        internal UInt32 MaxDrawIndexedIndexValue;
        /// <summary>
        /// max draw count for indirect draw calls
        /// </summary>
        internal UInt32 MaxDrawIndirectCount;
        /// <summary>
        /// max absolute sampler LOD bias
        /// </summary>
        internal float MaxSamplerLodBias;
        /// <summary>
        /// max degree of sampler anisotropy
        /// </summary>
        internal float MaxSamplerAnisotropy;
        /// <summary>
        /// max number of active viewports
        /// </summary>
        internal UInt32 MaxViewports;
        /// <summary>
        /// max viewport dimensions(x,y)
        /// </summary>
        internal unsafe fixed UInt32 MaxViewportDimensions[2];
        /// <summary>
        /// viewport bounds range(min,max)
        /// </summary>
        internal unsafe fixed float ViewportBoundsRange[2];
        /// <summary>
        /// number bits of subpixel precision for viewport
        /// </summary>
        internal UInt32 ViewportSubPixelBits;
        /// <summary>
        /// min required alignment of pointers returned by MapMemory(bytes)
        /// </summary>
        internal UIntPtr MinMemoryMapAlignment;
        /// <summary>
        /// min required alignment for texel buffer offsets(bytes) 
        /// </summary>
        internal DeviceSize MinTexelBufferOffsetAlignment;
        /// <summary>
        /// min required alignment for uniform buffer sizes and offsets(bytes)
        /// </summary>
        internal DeviceSize MinUniformBufferOffsetAlignment;
        /// <summary>
        /// min required alignment for storage buffer offsets(bytes)
        /// </summary>
        internal DeviceSize MinStorageBufferOffsetAlignment;
        /// <summary>
        /// min texel offset for OpTextureSampleOffset
        /// </summary>
        internal Int32 MinTexelOffset;
        /// <summary>
        /// max texel offset for OpTextureSampleOffset
        /// </summary>
        internal UInt32 MaxTexelOffset;
        /// <summary>
        /// min texel offset for OpTextureGatherOffset
        /// </summary>
        internal Int32 MinTexelGatherOffset;
        /// <summary>
        /// max texel offset for OpTextureGatherOffset
        /// </summary>
        internal UInt32 MaxTexelGatherOffset;
        /// <summary>
        /// furthest negative offset for interpolateAtOffset
        /// </summary>
        internal float MinInterpolationOffset;
        /// <summary>
        /// furthest positive offset for interpolateAtOffset
        /// </summary>
        internal float MaxInterpolationOffset;
        /// <summary>
        /// number of subpixel bits for interpolateAtOffset
        /// </summary>
        internal UInt32 SubPixelInterpolationOffsetBits;
        /// <summary>
        /// max width for a framebuffer
        /// </summary>
        internal UInt32 MaxFramebufferWidth;
        /// <summary>
        /// max height for a framebuffer
        /// </summary>
        internal UInt32 MaxFramebufferHeight;
        /// <summary>
        /// max layer count for a layered framebuffer
        /// </summary>
        internal UInt32 MaxFramebufferLayers;
        /// <summary>
        /// supported color sample counts for a framebuffer
        /// </summary>
        internal SampleCountFlags FramebufferColorSampleCounts;
        /// <summary>
        /// supported depth sample counts for a framebuffer
        /// </summary>
        internal SampleCountFlags FramebufferDepthSampleCounts;
        /// <summary>
        /// supported stencil sample counts for a framebuffer
        /// </summary>
        internal SampleCountFlags FramebufferStencilSampleCounts;
        /// <summary>
        /// supported sample counts for a framebuffer with no attachments
        /// </summary>
        internal SampleCountFlags FramebufferNoAttachmentsSampleCounts;
        /// <summary>
        /// max number of color attachments per subpass
        /// </summary>
        internal UInt32 MaxColorAttachments;
        /// <summary>
        /// supported color sample counts for a non-integer sampled image
        /// </summary>
        internal SampleCountFlags SampledImageColorSampleCounts;
        /// <summary>
        /// supported sample counts for an integer image
        /// </summary>
        internal SampleCountFlags SampledImageIntegerSampleCounts;
        /// <summary>
        /// supported depth sample counts for a sampled image
        /// </summary>
        internal SampleCountFlags SampledImageDepthSampleCounts;
        /// <summary>
        /// supported stencil sample counts for a sampled image
        /// </summary>
        internal SampleCountFlags SampledImageStencilSampleCounts;
        /// <summary>
        /// supported sample counts for a storage image
        /// </summary>
        internal SampleCountFlags StorageImageSampleCounts;
        /// <summary>
        /// max number of sample mask words
        /// </summary>
        internal UInt32 MaxSampleMaskWords;
        /// <summary>
        /// timestamps on graphics and compute queues
        /// </summary>
        internal Bool32 TimestampComputeAndGraphics;
        /// <summary>
        /// number of nanoseconds it takes for timestamp query value to increment by 1
        /// </summary>
        internal float TimestampPeriod;
        /// <summary>
        /// max number of clip distances
        /// </summary>
        internal UInt32 MaxClipDistances;
        /// <summary>
        /// max number of cull distances
        /// </summary>
        internal UInt32 MaxCullDistances;
        /// <summary>
        /// max combined number of user clipping
        /// </summary>
        internal UInt32 MaxCombinedClipAndCullDistances;
        /// <summary>
        /// distinct queue priorities available 
        /// </summary>
        internal UInt32 DiscreteQueuePriorities;
        /// <summary>
        /// range(min,max) of supported point sizes
        /// </summary>
        internal unsafe fixed float PointSizeRange[2];
        /// <summary>
        /// range(min,max) of supported line widths
        /// </summary>
        internal unsafe fixed float LineWidthRange[2];
        /// <summary>
        /// granularity of supported point sizes
        /// </summary>
        internal float PointSizeGranularity;
        /// <summary>
        /// granularity of supported line widths
        /// </summary>
        internal float LineWidthGranularity;
        /// <summary>
        /// line rasterization follows preferred rules
        /// </summary>
        internal Bool32 StrictLines;
        /// <summary>
        /// supports standard sample locations for all supported sample counts
        /// </summary>
        internal Bool32 StandardSampleLocations;
        /// <summary>
        /// optimal offset of buffer copies
        /// </summary>
        internal DeviceSize OptimalBufferCopyOffsetAlignment;
        /// <summary>
        /// optimal pitch of buffer copies
        /// </summary>
        internal DeviceSize OptimalBufferCopyRowPitchAlignment;
        /// <summary>
        /// minimum size and alignment for non-coherent host-mapped device memory access
        /// </summary>
        internal DeviceSize NonCoherentAtomSize;
    }

    internal partial struct SemaphoreCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Semaphore creation flags
        /// </summary>
        internal SemaphoreCreateFlags Flags;
    }

    internal partial struct QueryPoolCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal QueryPoolCreateFlags Flags;
        internal QueryType QueryType;
        internal UInt32 QueryCount;
        /// <summary>
        /// Optional
        /// </summary>
        internal QueryPipelineStatisticFlags PipelineStatistics;
    }

    internal partial struct FramebufferCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal FramebufferCreateFlags Flags;
        internal UInt64 RenderPass;
        internal UInt32 AttachmentCount;
        internal IntPtr Attachments;
        internal UInt32 Width;
        internal UInt32 Height;
        internal UInt32 Layers;
    }

    internal partial struct SubmitInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 WaitSemaphoreCount;
        internal IntPtr WaitSemaphores;
        internal IntPtr WaitDstStageMask;
        internal UInt32 CommandBufferCount;
        internal IntPtr CommandBuffers;
        internal UInt32 SignalSemaphoreCount;
        internal IntPtr SignalSemaphores;
    }

    internal partial struct DisplayPropertiesKhr
    {
        /// <summary>
        /// Handle of the display object
        /// </summary>
        internal UInt64 Display;
        /// <summary>
        /// Name of the display
        /// </summary>
        internal IntPtr DisplayName;
        /// <summary>
        /// In millimeters?
        /// </summary>
        internal Extent2D PhysicalDimensions;
        /// <summary>
        /// Max resolution for CRT?
        /// </summary>
        internal Extent2D PhysicalResolution;
        /// <summary>
        /// one or more bits from VkSurfaceTransformFlagsKHR
        /// </summary>
        internal SurfaceTransformFlagsKhr SupportedTransforms;
        /// <summary>
        /// VK_TRUE if the overlay plane's z-order can be changed on this display.
        /// </summary>
        internal Bool32 PlaneReorderPossible;
        /// <summary>
        /// VK_TRUE if this is a "smart" display that supports self-refresh/internal buffering.
        /// </summary>
        internal Bool32 PersistentContent;
    }

    internal partial struct DisplayPlanePropertiesKhr
    {
        /// <summary>
        /// Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use.
        /// </summary>
        internal UInt64 CurrentDisplay;
        /// <summary>
        /// Current z-order of the plane.
        /// </summary>
        internal UInt32 CurrentStackIndex;
    }

    internal partial struct DisplayModePropertiesKhr
    {
        /// <summary>
        /// Handle of this display mode.
        /// </summary>
        internal UInt64 DisplayMode;
        /// <summary>
        /// The parameters this mode uses.
        /// </summary>
        internal DisplayModeParametersKhr Parameters;
    }

    internal partial struct DisplayModeCreateInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DisplayModeCreateFlagsKhr Flags;
        /// <summary>
        /// The parameters this mode uses.
        /// </summary>
        internal DisplayModeParametersKhr Parameters;
    }

    internal partial struct DisplaySurfaceCreateInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DisplaySurfaceCreateFlagsKhr Flags;
        /// <summary>
        /// The mode to use when displaying this surface
        /// </summary>
        internal UInt64 DisplayMode;
        /// <summary>
        /// The plane on which this surface appears.  Must be between 0 and the value returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR() in pPropertyCount.
        /// </summary>
        internal UInt32 PlaneIndex;
        /// <summary>
        /// The z-order of the plane.
        /// </summary>
        internal UInt32 PlaneStackIndex;
        /// <summary>
        /// Transform to apply to the images as part of the scanout operation
        /// </summary>
        internal SurfaceTransformFlagsKhr Transform;
        /// <summary>
        /// Global alpha value.  Must be between 0 and 1, inclusive.  Ignored if alphaMode is not VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR
        /// </summary>
        internal float GlobalAlpha;
        /// <summary>
        /// What type of alpha blending to use.  Must be a bit from vkGetDisplayPlanePropertiesKHR::supportedAlpha.
        /// </summary>
        internal DisplayPlaneAlphaFlagsKhr AlphaMode;
        /// <summary>
        /// size of the images to use with this surface
        /// </summary>
        internal Extent2D ImageExtent;
    }

    internal partial struct DisplayPresentInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Rectangle within the presentable image to read pixel data from when presenting to the display.
        /// </summary>
        internal Rect2D SrcRect;
        /// <summary>
        /// Rectangle within the current display mode's visible region to display srcRectangle in.
        /// </summary>
        internal Rect2D DstRect;
        /// <summary>
        /// For smart displays, use buffered mode.  If the display properties member "persistentMode" is VK_FALSE, this member must always be VK_FALSE.
        /// </summary>
        internal Bool32 Persistent;
    }

    internal partial struct AndroidSurfaceCreateInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal AndroidSurfaceCreateFlagsKhr Flags;
        internal IntPtr Window;
    }

    internal partial struct ViSurfaceCreateInfoNn
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ViSurfaceCreateFlagsNn Flags;
        internal IntPtr Window;
    }

    internal partial struct Win32SurfaceCreateInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Win32SurfaceCreateFlagsKhr Flags;
        internal IntPtr Hinstance;
        internal IntPtr Hwnd;
    }

    internal partial struct SwapchainCreateInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SwapchainCreateFlagsKhr Flags;
        /// <summary>
        /// The swapchain's target surface
        /// </summary>
        internal UInt64 Surface;
        /// <summary>
        /// Minimum number of presentation images the application needs
        /// </summary>
        internal UInt32 MinImageCount;
        /// <summary>
        /// Format of the presentation images
        /// </summary>
        internal Format ImageFormat;
        /// <summary>
        /// Colorspace of the presentation images
        /// </summary>
        internal ColorSpaceKhr ImageColorSpace;
        /// <summary>
        /// Dimensions of the presentation images
        /// </summary>
        internal Extent2D ImageExtent;
        /// <summary>
        /// Determines the number of views for multiview/stereo presentation
        /// </summary>
        internal UInt32 ImageArrayLayers;
        /// <summary>
        /// Bits indicating how the presentation images will be used
        /// </summary>
        internal ImageUsageFlags ImageUsage;
        /// <summary>
        /// Sharing mode used for the presentation images
        /// </summary>
        internal SharingMode ImageSharingMode;
        /// <summary>
        /// Number of queue families having access to the images in case of concurrent sharing mode
        /// </summary>
        internal UInt32 QueueFamilyIndexCount;
        /// <summary>
        /// Array of queue family indices having access to the images in case of concurrent sharing mode
        /// </summary>
        internal IntPtr QueueFamilyIndices;
        /// <summary>
        /// The transform, relative to the device's natural orientation, applied to the image content prior to presentation
        /// </summary>
        internal SurfaceTransformFlagsKhr PreTransform;
        /// <summary>
        /// The alpha blending mode used when compositing this surface with other surfaces in the window system
        /// </summary>
        internal CompositeAlphaFlagsKhr CompositeAlpha;
        /// <summary>
        /// Which presentation mode to use for presents on this swap chain
        /// </summary>
        internal PresentModeKhr PresentMode;
        /// <summary>
        /// Specifies whether presentable images may be affected by window clip regions
        /// </summary>
        internal Bool32 Clipped;
        /// <summary>
        /// Existing swap chain to replace, if any
        /// </summary>
        internal UInt64 OldSwapchain;
    }

    internal partial struct PresentInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Number of semaphores to wait for before presenting
        /// </summary>
        internal UInt32 WaitSemaphoreCount;
        /// <summary>
        /// Semaphores to wait for before presenting
        /// </summary>
        internal IntPtr WaitSemaphores;
        /// <summary>
        /// Number of swapchains to present in this call
        /// </summary>
        internal UInt32 SwapchainCount;
        /// <summary>
        /// Swapchains to present an image from
        /// </summary>
        internal IntPtr Swapchains;
        /// <summary>
        /// Indices of which presentable images to present
        /// </summary>
        internal IntPtr ImageIndices;
        /// <summary>
        /// Optional(i.e. if non-NULL) VkResult for each swapchain
        /// </summary>
        internal IntPtr Results;
    }

    internal partial struct DebugReportCallbackCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Indicates which events call this callback
        /// </summary>
        internal DebugReportFlagsExt Flags;
        /// <summary>
        /// Function pointer of a callback function
        /// </summary>
        internal IntPtr PfnCallback;
        /// <summary>
        /// User data provided to callback function
        /// </summary>
        internal IntPtr UserData;
    }

    internal partial struct ValidationFlagsExt
    {
        /// <summary>
        /// Must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT
        /// </summary>
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Number of validation checks to disable
        /// </summary>
        internal UInt32 DisabledValidationCheckCount;
        /// <summary>
        /// Validation checks to disable
        /// </summary>
        internal IntPtr DisabledValidationChecks;
    }

    internal partial struct ValidationFeaturesExt
    {
        /// <summary>
        /// Must be VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT
        /// </summary>
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Number of validation features to enable
        /// </summary>
        internal UInt32 EnabledValidationFeatureCount;
        /// <summary>
        /// Validation features to enable
        /// </summary>
        internal IntPtr EnabledValidationFeatures;
        /// <summary>
        /// Number of validation features to disable
        /// </summary>
        internal UInt32 DisabledValidationFeatureCount;
        /// <summary>
        /// Validation features to disable
        /// </summary>
        internal IntPtr DisabledValidationFeatures;
    }

    internal partial struct PipelineRasterizationStateRasterizationOrderAmd
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Rasterization order to use for the pipeline
        /// </summary>
        internal RasterizationOrderAmd RasterizationOrder;
    }

    internal partial struct DebugMarkerObjectNameInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// The type of the object
        /// </summary>
        internal DebugReportObjectTypeExt ObjectType;
        /// <summary>
        /// The handle of the object, cast to uint64_t
        /// </summary>
        internal UInt64 Object;
        /// <summary>
        /// Name to apply to the object
        /// </summary>
        internal IntPtr ObjectName;
    }

    internal partial struct DebugMarkerObjectTagInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// The type of the object
        /// </summary>
        internal DebugReportObjectTypeExt ObjectType;
        /// <summary>
        /// The handle of the object, cast to uint64_t
        /// </summary>
        internal UInt64 Object;
        /// <summary>
        /// The name of the tag to set on the object
        /// </summary>
        internal UInt64 TagName;
        /// <summary>
        /// The length in bytes of the tag data
        /// </summary>
        internal UIntPtr TagSize;
        /// <summary>
        /// Tag data to attach to the object
        /// </summary>
        internal IntPtr Tag;
    }

    internal partial struct DebugMarkerMarkerInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Name of the debug marker
        /// </summary>
        internal IntPtr MarkerName;
        /// <summary>
        /// Optional color for debug marker
        /// </summary>
        internal unsafe fixed float Color[4];
    }

    internal partial struct DedicatedAllocationImageCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Whether this image uses a dedicated allocation
        /// </summary>
        internal Bool32 DedicatedAllocation;
    }

    internal partial struct DedicatedAllocationBufferCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Whether this buffer uses a dedicated allocation
        /// </summary>
        internal Bool32 DedicatedAllocation;
    }

    internal partial struct DedicatedAllocationMemoryAllocateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Image that this allocation will be bound to
        /// </summary>
        internal UInt64 Image;
        /// <summary>
        /// Buffer that this allocation will be bound to
        /// </summary>
        internal UInt64 Buffer;
    }

    internal partial struct ExternalMemoryImageCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryHandleTypeFlagsNv HandleTypes;
    }

    internal partial struct ExportMemoryAllocateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryHandleTypeFlagsNv HandleTypes;
    }

    internal partial struct Win32KeyedMutexAcquireReleaseInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 AcquireCount;
        internal IntPtr AcquireSyncs;
        internal IntPtr AcquireKeys;
        internal IntPtr AcquireTimeoutMilliseconds;
        internal UInt32 ReleaseCount;
        internal IntPtr ReleaseSyncs;
        internal IntPtr ReleaseKeys;
    }

    internal partial struct DeviceGeneratedCommandsFeaturesNvx
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ComputeBindingPointSupport;
    }

    internal partial struct DeviceGeneratedCommandsLimitsNvx
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxIndirectCommandsLayoutTokenCount;
        internal UInt32 MaxObjectEntryCounts;
        internal UInt32 MinSequenceCountBufferOffsetAlignment;
        internal UInt32 MinSequenceIndexBufferOffsetAlignment;
        internal UInt32 MinCommandsTokenBufferOffsetAlignment;
    }

    internal partial struct IndirectCommandsTokenNvx
    {
        internal IndirectCommandsTokenTypeNvx TokenType;
        /// <summary>
        /// buffer containing tableEntries and additional data for indirectCommands
        /// </summary>
        internal UInt64 Buffer;
        /// <summary>
        /// offset from the base address of the buffer
        /// </summary>
        internal DeviceSize Offset;
    }

    internal partial struct IndirectCommandsLayoutCreateInfoNvx
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineBindPoint PipelineBindPoint;
        internal IndirectCommandsLayoutUsageFlagsNvx Flags;
        internal UInt32 TokenCount;
        internal IntPtr Tokens;
    }

    internal partial struct CmdProcessCommandsInfoNvx
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 ObjectTable;
        internal UInt64 IndirectCommandsLayout;
        internal UInt32 IndirectCommandsTokenCount;
        internal IntPtr IndirectCommandsTokens;
        internal UInt32 MaxSequencesCount;
        internal IntPtr TargetCommandBuffer;
        internal UInt64 SequencesCountBuffer;
        internal DeviceSize SequencesCountOffset;
        internal UInt64 SequencesIndexBuffer;
        internal DeviceSize SequencesIndexOffset;
    }

    internal partial struct CmdReserveSpaceForCommandsInfoNvx
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 ObjectTable;
        internal UInt64 IndirectCommandsLayout;
        internal UInt32 MaxSequencesCount;
    }

    internal partial struct ObjectTableCreateInfoNvx
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 ObjectCount;
        internal IntPtr ObjectEntryTypes;
        internal IntPtr ObjectEntryCounts;
        internal IntPtr ObjectEntryUsageFlags;
        internal UInt32 MaxUniformBuffersPerDescriptor;
        internal UInt32 MaxStorageBuffersPerDescriptor;
        internal UInt32 MaxStorageImagesPerDescriptor;
        internal UInt32 MaxSampledImagesPerDescriptor;
        internal UInt32 MaxPipelineLayouts;
    }

    internal partial struct ObjectTablePipelineEntryNvx
    {
        internal ObjectEntryTypeNvx Type;
        internal ObjectEntryUsageFlagsNvx Flags;
        internal UInt64 Pipeline;
    }

    internal partial struct ObjectTableDescriptorSetEntryNvx
    {
        internal ObjectEntryTypeNvx Type;
        internal ObjectEntryUsageFlagsNvx Flags;
        internal UInt64 PipelineLayout;
        internal UInt64 DescriptorSet;
    }

    internal partial struct ObjectTableVertexBufferEntryNvx
    {
        internal ObjectEntryTypeNvx Type;
        internal ObjectEntryUsageFlagsNvx Flags;
        internal UInt64 Buffer;
    }

    internal partial struct ObjectTableIndexBufferEntryNvx
    {
        internal ObjectEntryTypeNvx Type;
        internal ObjectEntryUsageFlagsNvx Flags;
        internal UInt64 Buffer;
        internal IndexType IndexType;
    }

    internal partial struct ObjectTablePushConstantEntryNvx
    {
        internal ObjectEntryTypeNvx Type;
        internal ObjectEntryUsageFlagsNvx Flags;
        internal UInt64 PipelineLayout;
        internal ShaderStageFlags StageFlags;
    }

    internal partial struct PhysicalDeviceFeatures2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PhysicalDeviceFeatures Features;
    }

    internal partial struct PhysicalDeviceProperties2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PhysicalDeviceProperties Properties;
    }

    internal partial struct FormatProperties2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal FormatProperties FormatProperties;
    }

    internal partial struct ImageFormatProperties2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ImageFormatProperties ImageFormatProperties;
    }

    internal partial struct PhysicalDeviceImageFormatInfo2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Format Format;
        internal ImageType Type;
        internal ImageTiling Tiling;
        internal ImageUsageFlags Usage;
        internal ImageCreateFlags Flags;
    }

    internal partial struct QueueFamilyProperties2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal QueueFamilyProperties QueueFamilyProperties;
    }

    internal partial struct PhysicalDeviceMemoryProperties2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PhysicalDeviceMemoryProperties MemoryProperties;
    }

    internal partial struct SparseImageFormatProperties2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SparseImageFormatProperties Properties;
    }

    internal partial struct PhysicalDeviceSparseImageFormatInfo2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Format Format;
        internal ImageType Type;
        internal SampleCountFlags Samples;
        internal ImageUsageFlags Usage;
        internal ImageTiling Tiling;
    }

    internal partial struct PhysicalDevicePushDescriptorPropertiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxPushDescriptors;
    }

    internal partial struct PhysicalDeviceDriverPropertiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DriverIdKhr DriverId;
        internal unsafe fixed byte DriverName[256];
        internal unsafe fixed byte DriverInfo[256];
        internal ConformanceVersionKhr ConformanceVersion;
    }

    internal partial struct PresentRegionsKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Copy of VkPresentInfoKHR::swapchainCount
        /// </summary>
        internal UInt32 SwapchainCount;
        /// <summary>
        /// The regions that have changed
        /// </summary>
        internal IntPtr Regions;
    }

    internal partial struct PresentRegionKhr
    {
        /// <summary>
        /// Number of rectangles in pRectangles
        /// </summary>
        internal UInt32 RectangleCount;
        /// <summary>
        /// Array of rectangles that have changed in a swapchain's image(s)
        /// </summary>
        internal IntPtr Rectangles;
    }

    internal partial struct PhysicalDeviceVariablePointersFeatures
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 VariablePointersStorageBuffer;
        internal Bool32 VariablePointers;
    }

    internal partial struct PhysicalDeviceExternalImageFormatInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryHandleTypeFlags HandleType;
    }

    internal partial struct ExternalImageFormatProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryProperties ExternalMemoryProperties;
    }

    internal partial struct PhysicalDeviceExternalBufferInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal BufferCreateFlags Flags;
        internal BufferUsageFlags Usage;
        internal ExternalMemoryHandleTypeFlags HandleType;
    }

    internal partial struct ExternalBufferProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryProperties ExternalMemoryProperties;
    }

    internal partial struct PhysicalDeviceIDProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal unsafe fixed byte DeviceUuid[16];
        internal unsafe fixed byte DriverUuid[16];
        internal unsafe fixed byte DeviceLuid[8];
        internal UInt32 DeviceNodeMask;
        internal Bool32 DeviceLuidvalid;
    }

    internal partial struct ExternalMemoryImageCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryHandleTypeFlags HandleTypes;
    }

    internal partial struct ExternalMemoryBufferCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryHandleTypeFlags HandleTypes;
    }

    internal partial struct ExportMemoryAllocateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryHandleTypeFlags HandleTypes;
    }

    internal partial struct MemoryWin32HandlePropertiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MemoryTypeBits;
    }

    internal partial struct MemoryGetWin32HandleInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Memory;
        internal ExternalMemoryHandleTypeFlags HandleType;
    }

    internal partial struct ImportMemoryFdInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryHandleTypeFlags HandleType;
        internal int Fd;
    }

    internal partial struct MemoryFdPropertiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MemoryTypeBits;
    }

    internal partial struct MemoryGetFdInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Memory;
        internal ExternalMemoryHandleTypeFlags HandleType;
    }

    internal partial struct Win32KeyedMutexAcquireReleaseInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 AcquireCount;
        internal IntPtr AcquireSyncs;
        internal IntPtr AcquireKeys;
        internal IntPtr AcquireTimeouts;
        internal UInt32 ReleaseCount;
        internal IntPtr ReleaseSyncs;
        internal IntPtr ReleaseKeys;
    }

    internal partial struct PhysicalDeviceExternalSemaphoreInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalSemaphoreHandleTypeFlags HandleType;
    }

    internal partial struct ExternalSemaphoreProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalSemaphoreHandleTypeFlags ExportFromImportedHandleTypes;
        internal ExternalSemaphoreHandleTypeFlags CompatibleHandleTypes;
        internal ExternalSemaphoreFeatureFlags ExternalSemaphoreFeatures;
    }

    internal partial struct ExportSemaphoreCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalSemaphoreHandleTypeFlags HandleTypes;
    }

    internal partial struct D3D12FenceSubmitInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 WaitSemaphoreValuesCount;
        internal IntPtr WaitSemaphoreValues;
        internal UInt32 SignalSemaphoreValuesCount;
        internal IntPtr SignalSemaphoreValues;
    }

    internal partial struct SemaphoreGetWin32HandleInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Semaphore;
        internal ExternalSemaphoreHandleTypeFlags HandleType;
    }

    internal partial struct ImportSemaphoreFdInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Semaphore;
        internal SemaphoreImportFlags Flags;
        internal ExternalSemaphoreHandleTypeFlags HandleType;
        internal int Fd;
    }

    internal partial struct SemaphoreGetFdInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Semaphore;
        internal ExternalSemaphoreHandleTypeFlags HandleType;
    }

    internal partial struct PhysicalDeviceExternalFenceInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalFenceHandleTypeFlags HandleType;
    }

    internal partial struct ExternalFenceProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalFenceHandleTypeFlags ExportFromImportedHandleTypes;
        internal ExternalFenceHandleTypeFlags CompatibleHandleTypes;
        internal ExternalFenceFeatureFlags ExternalFenceFeatures;
    }

    internal partial struct ExportFenceCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalFenceHandleTypeFlags HandleTypes;
    }

    internal partial struct FenceGetWin32HandleInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Fence;
        internal ExternalFenceHandleTypeFlags HandleType;
    }

    internal partial struct ImportFenceFdInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Fence;
        internal FenceImportFlags Flags;
        internal ExternalFenceHandleTypeFlags HandleType;
        internal int Fd;
    }

    internal partial struct FenceGetFdInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Fence;
        internal ExternalFenceHandleTypeFlags HandleType;
    }

    internal partial struct PhysicalDeviceMultiviewFeatures
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Multiple views in a renderpass
        /// </summary>
        internal Bool32 Multiview;
        /// <summary>
        /// Multiple views in a renderpass w/ geometry shader
        /// </summary>
        internal Bool32 MultiviewGeometryShader;
        /// <summary>
        /// Multiple views in a renderpass w/ tessellation shader
        /// </summary>
        internal Bool32 MultiviewTessellationShader;
    }

    internal partial struct PhysicalDeviceMultiviewProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// max number of views in a subpass
        /// </summary>
        internal UInt32 MaxMultiviewViewCount;
        /// <summary>
        /// max instance index for a draw in a multiview subpass
        /// </summary>
        internal UInt32 MaxMultiviewInstanceIndex;
    }

    internal partial struct RenderPassMultiviewCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 SubpassCount;
        internal IntPtr ViewMasks;
        internal UInt32 DependencyCount;
        internal IntPtr ViewOffsets;
        internal UInt32 CorrelationMaskCount;
        internal IntPtr CorrelationMasks;
    }

    internal partial struct SurfaceCapabilities2Ext
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Supported minimum number of images for the surface
        /// </summary>
        internal UInt32 MinImageCount;
        /// <summary>
        /// Supported maximum number of images for the surface, 0 for unlimited
        /// </summary>
        internal UInt32 MaxImageCount;
        /// <summary>
        /// Current image width and height for the surface, (0, 0) if undefined
        /// </summary>
        internal Extent2D CurrentExtent;
        /// <summary>
        /// Supported minimum image width and height for the surface
        /// </summary>
        internal Extent2D MinImageExtent;
        /// <summary>
        /// Supported maximum image width and height for the surface
        /// </summary>
        internal Extent2D MaxImageExtent;
        /// <summary>
        /// Supported maximum number of image layers for the surface
        /// </summary>
        internal UInt32 MaxImageArrayLayers;
        /// <summary>
        /// 1 or more bits representing the transforms supported
        /// </summary>
        internal SurfaceTransformFlagsKhr SupportedTransforms;
        /// <summary>
        /// The surface's current transform relative to the device's natural orientation
        /// </summary>
        internal SurfaceTransformFlagsKhr CurrentTransform;
        /// <summary>
        /// 1 or more bits representing the alpha compositing modes supported
        /// </summary>
        internal CompositeAlphaFlagsKhr SupportedCompositeAlpha;
        /// <summary>
        /// Supported image usage flags for the surface
        /// </summary>
        internal ImageUsageFlags SupportedUsageFlags;
        internal SurfaceCounterFlagsExt SupportedSurfaceCounters;
    }

    internal partial struct DisplayPowerInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DisplayPowerStateExt PowerState;
    }

    internal partial struct DeviceEventInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceEventTypeExt DeviceEvent;
    }

    internal partial struct DisplayEventInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DisplayEventTypeExt DisplayEvent;
    }

    internal partial struct SwapchainCounterCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SurfaceCounterFlagsExt SurfaceCounters;
    }

    internal partial struct MemoryAllocateFlagsInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal MemoryAllocateFlags Flags;
        internal UInt32 DeviceMask;
    }

    internal partial struct BindBufferMemoryInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Buffer;
        internal UInt64 Memory;
        internal DeviceSize MemoryOffset;
    }

    internal partial struct BindBufferMemoryDeviceGroupInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 DeviceIndexCount;
        internal IntPtr DeviceIndices;
    }

    internal partial struct BindImageMemoryInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Image;
        internal UInt64 Memory;
        internal DeviceSize MemoryOffset;
    }

    internal partial struct BindImageMemoryDeviceGroupInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 DeviceIndexCount;
        internal IntPtr DeviceIndices;
        internal UInt32 SplitInstanceBindRegionCount;
        internal IntPtr SplitInstanceBindRegions;
    }

    internal partial struct DeviceGroupRenderPassBeginInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 DeviceMask;
        internal UInt32 DeviceRenderAreaCount;
        internal IntPtr DeviceRenderAreas;
    }

    internal partial struct DeviceGroupCommandBufferBeginInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 DeviceMask;
    }

    internal partial struct DeviceGroupSubmitInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 WaitSemaphoreCount;
        internal IntPtr WaitSemaphoreDeviceIndices;
        internal UInt32 CommandBufferCount;
        internal IntPtr CommandBufferDeviceMasks;
        internal UInt32 SignalSemaphoreCount;
        internal IntPtr SignalSemaphoreDeviceIndices;
    }

    internal partial struct DeviceGroupBindSparseInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 ResourceDeviceIndex;
        internal UInt32 MemoryDeviceIndex;
    }

    internal partial struct DeviceGroupPresentCapabilitiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal unsafe fixed UInt32 PresentMask[32];
        internal DeviceGroupPresentModeFlagsKhr Modes;
    }

    internal partial struct ImageSwapchainCreateInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Swapchain;
    }

    internal partial struct BindImageMemorySwapchainInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Swapchain;
        internal UInt32 ImageIndex;
    }

    internal partial struct AcquireNextImageInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Swapchain;
        internal UInt64 Timeout;
        internal UInt64 Semaphore;
        internal UInt64 Fence;
        internal UInt32 DeviceMask;
    }

    internal partial struct DeviceGroupPresentInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 SwapchainCount;
        internal IntPtr DeviceMasks;
        internal DeviceGroupPresentModeFlagsKhr Mode;
    }

    internal partial struct DeviceGroupDeviceCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 PhysicalDeviceCount;
        internal IntPtr PhysicalDevices;
    }

    internal partial struct DeviceGroupSwapchainCreateInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceGroupPresentModeFlagsKhr Modes;
    }

    internal partial struct DescriptorUpdateTemplateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DescriptorUpdateTemplateCreateFlags Flags;
        /// <summary>
        /// Number of descriptor update entries to use for the update template
        /// </summary>
        internal UInt32 DescriptorUpdateEntryCount;
        /// <summary>
        /// Descriptor update entries for the template
        /// </summary>
        internal IntPtr DescriptorUpdateEntries;
        internal DescriptorUpdateTemplateType TemplateType;
        internal UInt64 DescriptorSetLayout;
        internal PipelineBindPoint PipelineBindPoint;
        /// <summary>
        /// If used for push descriptors, this is the only allowed layout
        /// </summary>
        internal UInt64 PipelineLayout;
        internal UInt32 Set;
    }

    internal partial struct HdrMetadataExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Display primary's Red
        /// </summary>
        internal XYColorExt DisplayPrimaryRed;
        /// <summary>
        /// Display primary's Green
        /// </summary>
        internal XYColorExt DisplayPrimaryGreen;
        /// <summary>
        /// Display primary's Blue
        /// </summary>
        internal XYColorExt DisplayPrimaryBlue;
        /// <summary>
        /// Display primary's Blue
        /// </summary>
        internal XYColorExt WhitePoint;
        /// <summary>
        /// Display maximum luminance
        /// </summary>
        internal float MaxLuminance;
        /// <summary>
        /// Display minimum luminance
        /// </summary>
        internal float MinLuminance;
        /// <summary>
        /// Content maximum luminance
        /// </summary>
        internal float MaxContentLightLevel;
        internal float MaxFrameAverageLightLevel;
    }

    internal partial struct DisplayNativeHdrSurfaceCapabilitiesAmd
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 LocalDimmingSupport;
    }

    internal partial struct SwapchainDisplayNativeHdrCreateInfoAmd
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 LocalDimmingEnable;
    }

    internal partial struct PresentTimesInfoGoogle
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Copy of VkPresentInfoKHR::swapchainCount
        /// </summary>
        internal UInt32 SwapchainCount;
        /// <summary>
        /// The earliest times to present images
        /// </summary>
        internal IntPtr Times;
    }

    internal partial struct IOSSurfaceCreateInfoMvk
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal IOSSurfaceCreateFlagsMvk Flags;
        internal IntPtr View;
    }

    internal partial struct MacOSSurfaceCreateInfoMvk
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal MacOSSurfaceCreateFlagsMvk Flags;
        internal IntPtr View;
    }

    internal partial struct PipelineViewportWScalingStateCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ViewportWscalingEnable;
        internal UInt32 ViewportCount;
        internal IntPtr ViewportWscalings;
    }

    internal partial struct PipelineViewportSwizzleStateCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineViewportSwizzleStateCreateFlagsNv Flags;
        internal UInt32 ViewportCount;
        internal IntPtr ViewportSwizzles;
    }

    internal partial struct PhysicalDeviceDiscardRectanglePropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// max number of active discard rectangles
        /// </summary>
        internal UInt32 MaxDiscardRectangles;
    }

    internal partial struct PipelineDiscardRectangleStateCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineDiscardRectangleStateCreateFlagsExt Flags;
        internal DiscardRectangleModeExt DiscardRectangleMode;
        internal UInt32 DiscardRectangleCount;
        internal IntPtr DiscardRectangles;
    }

    internal partial struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 PerViewPositionAllComponents;
    }

    internal partial struct RenderPassInputAttachmentAspectCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 AspectReferenceCount;
        internal IntPtr AspectReferences;
    }

    internal partial struct PhysicalDeviceSurfaceInfo2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Surface;
    }

    internal partial struct SurfaceCapabilities2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SurfaceCapabilitiesKhr SurfaceCapabilities;
    }

    internal partial struct SurfaceFormat2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SurfaceFormatKhr SurfaceFormat;
    }

    internal partial struct DisplayProperties2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DisplayPropertiesKhr DisplayProperties;
    }

    internal partial struct DisplayPlaneProperties2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DisplayPlanePropertiesKhr DisplayPlaneProperties;
    }

    internal partial struct DisplayModeProperties2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DisplayModePropertiesKhr DisplayModeProperties;
    }

    internal partial struct DisplayPlaneInfo2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Mode;
        internal UInt32 PlaneIndex;
    }

    internal partial struct DisplayPlaneCapabilities2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DisplayPlaneCapabilitiesKhr Capabilities;
    }

    internal partial struct SharedPresentSurfaceCapabilitiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Supported image usage flags if swapchain created using a shared present mode
        /// </summary>
        internal ImageUsageFlags SharedPresentSupportedUsageFlags;
    }

    internal partial struct PhysicalDevice16BitStorageFeatures
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// 16-bit integer/floating-point variables supported in BufferBlock
        /// </summary>
        internal Bool32 StorageBuffer16BitAccess;
        /// <summary>
        /// 16-bit integer/floating-point variables supported in BufferBlock and Block
        /// </summary>
        internal Bool32 UniformAndStorageBuffer16BitAccess;
        /// <summary>
        /// 16-bit integer/floating-point variables supported in PushConstant
        /// </summary>
        internal Bool32 StoragePushConstant16;
        /// <summary>
        /// 16-bit integer/floating-point variables supported in shader inputs and outputs
        /// </summary>
        internal Bool32 StorageInputOutput16;
    }

    internal partial struct PhysicalDeviceSubgroupProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// The size of a subgroup for this queue.
        /// </summary>
        internal UInt32 SubgroupSize;
        /// <summary>
        /// Bitfield of what shader stages support subgroup operations
        /// </summary>
        internal ShaderStageFlags SupportedStages;
        /// <summary>
        /// Bitfield of what subgroup operations are supported.
        /// </summary>
        internal SubgroupFeatureFlags SupportedOperations;
        /// <summary>
        /// Flag to specify whether quad operations are available in all stages.
        /// </summary>
        internal Bool32 QuadOperationsInAllStages;
    }

    internal partial struct BufferMemoryRequirementsInfo2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Buffer;
    }

    internal partial struct ImageMemoryRequirementsInfo2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Image;
    }

    internal partial struct ImageSparseMemoryRequirementsInfo2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Image;
    }

    internal partial struct MemoryRequirements2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal MemoryRequirements MemoryRequirements;
    }

    internal partial struct SparseImageMemoryRequirements2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SparseImageMemoryRequirements MemoryRequirements;
    }

    internal partial struct PhysicalDevicePointClippingProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PointClippingBehavior PointClippingBehavior;
    }

    internal partial struct MemoryDedicatedRequirements
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 PrefersDedicatedAllocation;
        internal Bool32 RequiresDedicatedAllocation;
    }

    internal partial struct MemoryDedicatedAllocateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Image that this allocation will be bound to
        /// </summary>
        internal UInt64 Image;
        /// <summary>
        /// Buffer that this allocation will be bound to
        /// </summary>
        internal UInt64 Buffer;
    }

    internal partial struct ImageViewUsageCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ImageUsageFlags Usage;
    }

    internal partial struct PipelineTessellationDomainOriginStateCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal TessellationDomainOrigin DomainOrigin;
    }

    internal partial struct SamplerYcbcrConversionInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Conversion;
    }

    internal partial struct SamplerYcbcrConversionCreateInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Format Format;
        internal SamplerYcbcrModelConversion YcbcrModel;
        internal SamplerYcbcrRange YcbcrRange;
        internal ComponentMapping Components;
        internal ChromaLocation XChromaOffset;
        internal ChromaLocation YChromaOffset;
        internal Filter ChromaFilter;
        internal Bool32 ForceExplicitReconstruction;
    }

    internal partial struct BindImagePlaneMemoryInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ImageAspectFlags PlaneAspect;
    }

    internal partial struct ImagePlaneMemoryRequirementsInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ImageAspectFlags PlaneAspect;
    }

    internal partial struct PhysicalDeviceSamplerYcbcrConversionFeatures
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Sampler color conversion supported
        /// </summary>
        internal Bool32 SamplerYcbcrConversion;
    }

    internal partial struct SamplerYcbcrConversionImageFormatProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 CombinedImageSamplerDescriptorCount;
    }

    internal partial struct TextureLODGatherFormatPropertiesAmd
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 SupportsTextureGatherLodbiasAmd;
    }

    internal partial struct ConditionalRenderingBeginInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Buffer;
        internal DeviceSize Offset;
        internal ConditionalRenderingFlagsExt Flags;
    }

    internal partial struct ProtectedSubmitInfo
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Submit protected command buffers
        /// </summary>
        internal Bool32 ProtectedSubmit;
    }

    internal partial struct PhysicalDeviceProtectedMemoryFeatures
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ProtectedMemory;
    }

    internal partial struct PhysicalDeviceProtectedMemoryProperties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ProtectedNoFault;
    }

    internal partial struct DeviceQueueInfo2
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceQueueCreateFlags Flags;
        internal UInt32 QueueFamilyIndex;
        internal UInt32 QueueIndex;
    }

    internal partial struct PipelineCoverageToColorStateCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineCoverageToColorStateCreateFlagsNv Flags;
        internal Bool32 CoverageToColorEnable;
        internal UInt32 CoverageToColorLocation;
    }

    internal partial struct PhysicalDeviceSamplerFilterMinmaxPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 FilterMinmaxSingleComponentFormats;
        internal Bool32 FilterMinmaxImageComponentMapping;
    }

    internal partial struct SampleLocationsInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SampleCountFlags SampleLocationsPerPixel;
        internal Extent2D SampleLocationGridSize;
        internal UInt32 SampleLocationsCount;
        internal IntPtr SampleLocations;
    }

    internal partial struct AttachmentSampleLocationsExt
    {
        internal UInt32 AttachmentIndex;
        internal SampleLocationsInfoExt SampleLocationsInfo;
    }

    internal partial struct SubpassSampleLocationsExt
    {
        internal UInt32 SubpassIndex;
        internal SampleLocationsInfoExt SampleLocationsInfo;
    }

    internal partial struct RenderPassSampleLocationsBeginInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 AttachmentInitialSampleLocationsCount;
        internal IntPtr AttachmentInitialSampleLocations;
        internal UInt32 PostSubpassSampleLocationsCount;
        internal IntPtr PostSubpassSampleLocations;
    }

    internal partial struct PipelineSampleLocationsStateCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 SampleLocationsEnable;
        internal SampleLocationsInfoExt SampleLocationsInfo;
    }

    internal partial struct PhysicalDeviceSampleLocationsPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SampleCountFlags SampleLocationSampleCounts;
        internal Extent2D MaxSampleLocationGridSize;
        internal unsafe fixed float SampleLocationCoordinateRange[2];
        internal UInt32 SampleLocationSubPixelBits;
        internal Bool32 VariableSampleLocations;
    }

    internal partial struct MultisamplePropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Extent2D MaxSampleLocationGridSize;
    }

    internal partial struct SamplerReductionModeCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SamplerReductionModeExt ReductionMode;
    }

    internal partial struct PhysicalDeviceBlendOperationAdvancedFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 AdvancedBlendCoherentOperations;
    }

    internal partial struct PhysicalDeviceBlendOperationAdvancedPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 AdvancedBlendMaxColorAttachments;
        internal Bool32 AdvancedBlendIndependentBlend;
        internal Bool32 AdvancedBlendNonPremultipliedSrcColor;
        internal Bool32 AdvancedBlendNonPremultipliedDstColor;
        internal Bool32 AdvancedBlendCorrelatedOverlap;
        internal Bool32 AdvancedBlendAllOperations;
    }

    internal partial struct PipelineColorBlendAdvancedStateCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 SrcPremultiplied;
        internal Bool32 DstPremultiplied;
        internal BlendOverlapExt BlendOverlap;
    }

    internal partial struct PhysicalDeviceInlineUniformBlockFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 InlineUniformBlock;
        internal Bool32 DescriptorBindingInlineUniformBlockUpdateAfterBind;
    }

    internal partial struct PhysicalDeviceInlineUniformBlockPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxInlineUniformBlockSize;
        internal UInt32 MaxPerStageDescriptorInlineUniformBlocks;
        internal UInt32 MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
        internal UInt32 MaxDescriptorSetInlineUniformBlocks;
        internal UInt32 MaxDescriptorSetUpdateAfterBindInlineUniformBlocks;
    }

    internal partial struct WriteDescriptorSetInlineUniformBlockExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 DataSize;
        internal IntPtr Data;
    }

    internal partial struct DescriptorPoolInlineUniformBlockCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxInlineUniformBlockBindings;
    }

    internal partial struct PipelineCoverageModulationStateCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineCoverageModulationStateCreateFlagsNv Flags;
        internal CoverageModulationModeNv CoverageModulationMode;
        internal Bool32 CoverageModulationTableEnable;
        internal UInt32 CoverageModulationTableCount;
        internal IntPtr CoverageModulationTable;
    }

    internal partial struct ImageFormatListCreateInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 ViewFormatCount;
        internal IntPtr ViewFormats;
    }

    internal partial struct ValidationCacheCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ValidationCacheCreateFlagsExt Flags;
        internal UIntPtr InitialDataSize;
        internal IntPtr InitialData;
    }

    internal partial struct ShaderModuleValidationCacheCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 ValidationCache;
    }

    internal partial struct PhysicalDeviceMaintenance3Properties
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxPerSetDescriptors;
        internal DeviceSize MaxMemoryAllocationSize;
    }

    internal partial struct DescriptorSetLayoutSupport
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 Supported;
    }

    internal partial struct PhysicalDeviceShaderDrawParametersFeatures
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ShaderDrawParameters;
    }

    internal partial struct PhysicalDeviceFloat16Int8FeaturesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ShaderFloat16;
        internal Bool32 ShaderInt8;
    }

    internal partial struct PhysicalDeviceFloatControlsPropertiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 SeparateDenormSettings;
        internal Bool32 SeparateRoundingModeSettings;
        internal Bool32 ShaderSignedZeroInfNanPreserveFloat16;
        internal Bool32 ShaderSignedZeroInfNanPreserveFloat32;
        internal Bool32 ShaderSignedZeroInfNanPreserveFloat64;
        internal Bool32 ShaderDenormPreserveFloat16;
        internal Bool32 ShaderDenormPreserveFloat32;
        internal Bool32 ShaderDenormPreserveFloat64;
        internal Bool32 ShaderDenormFlushToZeroFloat16;
        internal Bool32 ShaderDenormFlushToZeroFloat32;
        internal Bool32 ShaderDenormFlushToZeroFloat64;
        internal Bool32 ShaderRoundingModeRtefloat16;
        internal Bool32 ShaderRoundingModeRtefloat32;
        internal Bool32 ShaderRoundingModeRtefloat64;
        internal Bool32 ShaderRoundingModeRtzfloat16;
        internal Bool32 ShaderRoundingModeRtzfloat32;
        internal Bool32 ShaderRoundingModeRtzfloat64;
    }

    internal partial struct PhysicalDeviceHostQueryResetFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 HostQueryReset;
    }

    internal partial struct ShaderStatisticsInfoAmd
    {
        internal ShaderStageFlags ShaderStageMask;
        internal ShaderResourceUsageAmd ResourceUsage;
        internal UInt32 NumPhysicalVgprs;
        internal UInt32 NumPhysicalSgprs;
        internal UInt32 NumAvailableVgprs;
        internal UInt32 NumAvailableSgprs;
        internal unsafe fixed UInt32 ComputeWorkGroupSize[3];
    }

    internal partial struct DeviceQueueGlobalPriorityCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal QueueGlobalPriorityExt GlobalPriority;
    }

    internal partial struct DebugUtilsObjectNameInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ObjectType ObjectType;
        internal UInt64 ObjectHandle;
        internal IntPtr ObjectName;
    }

    internal partial struct DebugUtilsObjectTagInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ObjectType ObjectType;
        internal UInt64 ObjectHandle;
        internal UInt64 TagName;
        internal UIntPtr TagSize;
        internal IntPtr Tag;
    }

    internal partial struct DebugUtilsLabelExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal IntPtr LabelName;
        internal unsafe fixed float Color[4];
    }

    internal partial struct DebugUtilsMessengerCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DebugUtilsMessengerCreateFlagsExt Flags;
        internal DebugUtilsMessageSeverityFlagsExt MessageSeverity;
        internal DebugUtilsMessageTypeFlagsExt MessageType;
        internal IntPtr PfnUserCallback;
        internal IntPtr UserData;
    }

    internal partial struct DebugUtilsMessengerCallbackDataExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DebugUtilsMessengerCallbackDataFlagsExt Flags;
        internal IntPtr MessageIdName;
        internal Int32 MessageIdNumber;
        internal IntPtr Message;
        internal UInt32 QueueLabelCount;
        internal IntPtr QueueLabels;
        internal UInt32 CmdBufLabelCount;
        internal IntPtr CmdBufLabels;
        internal UInt32 ObjectCount;
        internal IntPtr Objects;
    }

    internal partial struct ImportMemoryHostPointerInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ExternalMemoryHandleTypeFlags HandleType;
        internal IntPtr HostPointer;
    }

    internal partial struct MemoryHostPointerPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MemoryTypeBits;
    }

    internal partial struct PhysicalDeviceExternalMemoryHostPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceSize MinImportedHostPointerAlignment;
    }

    internal partial struct PhysicalDeviceConservativeRasterizationPropertiesExt
    {
        internal StructureType SType;
        /// <summary>
        /// Pointer to next structure
        /// </summary>
        internal IntPtr Next;
        /// <summary>
        /// The size in pixels the primitive is enlarged at each edge during conservative rasterization
        /// </summary>
        internal float PrimitiveOverestimationSize;
        /// <summary>
        /// The maximum additional overestimation the client can specify in the pipeline state
        /// </summary>
        internal float MaxExtraPrimitiveOverestimationSize;
        /// <summary>
        /// The granularity of extra overestimation sizes the implementations supports between 0 and maxExtraOverestimationSize
        /// </summary>
        internal float ExtraPrimitiveOverestimationSizeGranularity;
        /// <summary>
        /// true if the implementation supports conservative rasterization underestimation mode
        /// </summary>
        internal Bool32 PrimitiveUnderestimation;
        /// <summary>
        /// true if conservative rasterization also applies to points and lines
        /// </summary>
        internal Bool32 ConservativePointAndLineRasterization;
        /// <summary>
        /// true if degenerate triangles(those with zero area after snap) are rasterized
        /// </summary>
        internal Bool32 DegenerateTrianglesRasterized;
        /// <summary>
        /// true if degenerate lines(those with zero length after snap) are rasterized
        /// </summary>
        internal Bool32 DegenerateLinesRasterized;
        /// <summary>
        /// true if the implementation supports the FullyCoveredEXT SPIR-V builtin fragment shader input variable
        /// </summary>
        internal Bool32 FullyCoveredFragmentShaderInputVariable;
        /// <summary>
        /// true if the implementation supports both conservative rasterization and post depth coverage sample coverage mask
        /// </summary>
        internal Bool32 ConservativeRasterizationPostDepthCoverage;
    }

    internal partial struct CalibratedTimestampInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal TimeDomainExt TimeDomain;
    }

    internal partial struct PhysicalDeviceShaderCorePropertiesAmd
    {
        internal StructureType SType;
        /// <summary>
        /// Pointer to next structure
        /// </summary>
        internal IntPtr Next;
        /// <summary>
        /// number of shader engines
        /// </summary>
        internal UInt32 ShaderEngineCount;
        /// <summary>
        /// number of shader arrays
        /// </summary>
        internal UInt32 ShaderArraysPerEngineCount;
        /// <summary>
        /// number of CUs per shader array
        /// </summary>
        internal UInt32 ComputeUnitsPerShaderArray;
        /// <summary>
        /// number of SIMDs per compute unit
        /// </summary>
        internal UInt32 SimdPerComputeUnit;
        /// <summary>
        /// number of wavefront slots in each SIMD
        /// </summary>
        internal UInt32 WavefrontsPerSimd;
        /// <summary>
        /// number of threads per wavefront
        /// </summary>
        internal UInt32 WavefrontSize;
        /// <summary>
        /// number of physical SGPRs per SIMD
        /// </summary>
        internal UInt32 SgprsPerSimd;
        /// <summary>
        /// minimum number of SGPRs that can be allocated by a wave
        /// </summary>
        internal UInt32 MinSgprAllocation;
        /// <summary>
        /// number of available SGPRs
        /// </summary>
        internal UInt32 MaxSgprAllocation;
        /// <summary>
        /// SGPRs are allocated in groups of this size
        /// </summary>
        internal UInt32 SgprAllocationGranularity;
        /// <summary>
        /// number of physical VGPRs per SIMD
        /// </summary>
        internal UInt32 VgprsPerSimd;
        /// <summary>
        /// minimum number of VGPRs that can be allocated by a wave
        /// </summary>
        internal UInt32 MinVgprAllocation;
        /// <summary>
        /// number of available VGPRs
        /// </summary>
        internal UInt32 MaxVgprAllocation;
        /// <summary>
        /// VGPRs are allocated in groups of this size
        /// </summary>
        internal UInt32 VgprAllocationGranularity;
    }

    internal partial struct PipelineRasterizationConservativeStateCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineRasterizationConservativeStateCreateFlagsExt Flags;
        internal ConservativeRasterizationModeExt ConservativeRasterizationMode;
        internal float ExtraPrimitiveOverestimationSize;
    }

    internal partial struct PhysicalDeviceDescriptorIndexingFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ShaderInputAttachmentArrayDynamicIndexing;
        internal Bool32 ShaderUniformTexelBufferArrayDynamicIndexing;
        internal Bool32 ShaderStorageTexelBufferArrayDynamicIndexing;
        internal Bool32 ShaderUniformBufferArrayNonUniformIndexing;
        internal Bool32 ShaderSampledImageArrayNonUniformIndexing;
        internal Bool32 ShaderStorageBufferArrayNonUniformIndexing;
        internal Bool32 ShaderStorageImageArrayNonUniformIndexing;
        internal Bool32 ShaderInputAttachmentArrayNonUniformIndexing;
        internal Bool32 ShaderUniformTexelBufferArrayNonUniformIndexing;
        internal Bool32 ShaderStorageTexelBufferArrayNonUniformIndexing;
        internal Bool32 DescriptorBindingUniformBufferUpdateAfterBind;
        internal Bool32 DescriptorBindingSampledImageUpdateAfterBind;
        internal Bool32 DescriptorBindingStorageImageUpdateAfterBind;
        internal Bool32 DescriptorBindingStorageBufferUpdateAfterBind;
        internal Bool32 DescriptorBindingUniformTexelBufferUpdateAfterBind;
        internal Bool32 DescriptorBindingStorageTexelBufferUpdateAfterBind;
        internal Bool32 DescriptorBindingUpdateUnusedWhilePending;
        internal Bool32 DescriptorBindingPartiallyBound;
        internal Bool32 DescriptorBindingVariableDescriptorCount;
        internal Bool32 RuntimeDescriptorArray;
    }

    internal partial struct PhysicalDeviceDescriptorIndexingPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxUpdateAfterBindDescriptorsInAllPools;
        internal Bool32 ShaderUniformBufferArrayNonUniformIndexingNative;
        internal Bool32 ShaderSampledImageArrayNonUniformIndexingNative;
        internal Bool32 ShaderStorageBufferArrayNonUniformIndexingNative;
        internal Bool32 ShaderStorageImageArrayNonUniformIndexingNative;
        internal Bool32 ShaderInputAttachmentArrayNonUniformIndexingNative;
        internal Bool32 RobustBufferAccessUpdateAfterBind;
        internal Bool32 QuadDivergentImplicitLod;
        internal UInt32 MaxPerStageDescriptorUpdateAfterBindSamplers;
        internal UInt32 MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
        internal UInt32 MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
        internal UInt32 MaxPerStageDescriptorUpdateAfterBindSampledImages;
        internal UInt32 MaxPerStageDescriptorUpdateAfterBindStorageImages;
        internal UInt32 MaxPerStageDescriptorUpdateAfterBindInputAttachments;
        internal UInt32 MaxPerStageUpdateAfterBindResources;
        internal UInt32 MaxDescriptorSetUpdateAfterBindSamplers;
        internal UInt32 MaxDescriptorSetUpdateAfterBindUniformBuffers;
        internal UInt32 MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        internal UInt32 MaxDescriptorSetUpdateAfterBindStorageBuffers;
        internal UInt32 MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        internal UInt32 MaxDescriptorSetUpdateAfterBindSampledImages;
        internal UInt32 MaxDescriptorSetUpdateAfterBindStorageImages;
        internal UInt32 MaxDescriptorSetUpdateAfterBindInputAttachments;
    }

    internal partial struct DescriptorSetLayoutBindingFlagsCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 BindingCount;
        internal IntPtr BindingFlags;
    }

    internal partial struct DescriptorSetVariableDescriptorCountAllocateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 DescriptorSetCount;
        internal IntPtr DescriptorCounts;
    }

    internal partial struct DescriptorSetVariableDescriptorCountLayoutSupportExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxVariableDescriptorCount;
    }

    internal partial struct AttachmentDescription2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal AttachmentDescriptionFlags Flags;
        internal Format Format;
        internal SampleCountFlags Samples;
        /// <summary>
        /// Load operation for color or depth data
        /// </summary>
        internal AttachmentLoadOp LoadOp;
        /// <summary>
        /// Store operation for color or depth data
        /// </summary>
        internal AttachmentStoreOp StoreOp;
        /// <summary>
        /// Load operation for stencil data
        /// </summary>
        internal AttachmentLoadOp StencilLoadOp;
        /// <summary>
        /// Store operation for stencil data
        /// </summary>
        internal AttachmentStoreOp StencilStoreOp;
        internal ImageLayout InitialLayout;
        internal ImageLayout FinalLayout;
    }

    internal partial struct AttachmentReference2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 Attachment;
        internal ImageLayout Layout;
        internal ImageAspectFlags AspectMask;
    }

    internal partial struct SubpassDescription2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SubpassDescriptionFlags Flags;
        internal PipelineBindPoint PipelineBindPoint;
        internal UInt32 ViewMask;
        internal UInt32 InputAttachmentCount;
        internal IntPtr InputAttachments;
        internal UInt32 ColorAttachmentCount;
        internal IntPtr ColorAttachments;
        internal IntPtr ResolveAttachments;
        internal IntPtr DepthStencilAttachment;
        internal UInt32 PreserveAttachmentCount;
        internal IntPtr PreserveAttachments;
    }

    internal partial struct SubpassDependency2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 SrcSubpass;
        internal UInt32 DstSubpass;
        internal PipelineStageFlags SrcStageMask;
        internal PipelineStageFlags DstStageMask;
        internal AccessFlags SrcAccessMask;
        internal AccessFlags DstAccessMask;
        internal DependencyFlags DependencyFlags;
        internal Int32 ViewOffset;
    }

    internal partial struct RenderPassCreateInfo2Khr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal RenderPassCreateFlags Flags;
        internal UInt32 AttachmentCount;
        internal IntPtr Attachments;
        internal UInt32 SubpassCount;
        internal IntPtr Subpasses;
        internal UInt32 DependencyCount;
        internal IntPtr Dependencies;
        internal UInt32 CorrelatedViewMaskCount;
        internal IntPtr CorrelatedViewMasks;
    }

    internal partial struct SubpassBeginInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal SubpassContents Contents;
    }

    internal partial struct SubpassEndInfoKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
    }

    internal partial struct PipelineVertexInputDivisorStateCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 VertexBindingDivisorCount;
        internal IntPtr VertexBindingDivisors;
    }

    internal partial struct PhysicalDeviceVertexAttributeDivisorPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// max value of vertex attribute divisor
        /// </summary>
        internal UInt32 MaxVertexAttribDivisor;
    }

    internal partial struct PhysicalDevicePciBusInfoPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 PciDomain;
        internal UInt32 PciBus;
        internal UInt32 PciDevice;
        internal UInt32 PciFunction;
    }

    internal partial struct ImportAndroidHardwareBufferInfoAndroid
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal IntPtr Buffer;
    }

    internal partial struct AndroidHardwareBufferUsageAndroid
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 AndroidHardwareBufferUsage;
    }

    internal partial struct AndroidHardwareBufferPropertiesAndroid
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceSize AllocationSize;
        internal UInt32 MemoryTypeBits;
    }

    internal partial struct MemoryGetAndroidHardwareBufferInfoAndroid
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Memory;
    }

    internal partial struct AndroidHardwareBufferFormatPropertiesAndroid
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Format Format;
        internal UInt64 ExternalFormat;
        internal FormatFeatureFlags FormatFeatures;
        internal ComponentMapping SamplerYcbcrConversionComponents;
        internal SamplerYcbcrModelConversion SuggestedYcbcrModel;
        internal SamplerYcbcrRange SuggestedYcbcrRange;
        internal ChromaLocation SuggestedXchromaOffset;
        internal ChromaLocation SuggestedYchromaOffset;
    }

    internal partial struct CommandBufferInheritanceConditionalRenderingInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Whether this secondary command buffer may be executed during an active conditional rendering
        /// </summary>
        internal Bool32 ConditionalRenderingEnable;
    }

    internal partial struct ExternalFormatAndroid
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 ExternalFormat;
    }

    internal partial struct PhysicalDevice8BitStorageFeaturesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// 8-bit integer variables supported in StorageBuffer
        /// </summary>
        internal Bool32 StorageBuffer8BitAccess;
        /// <summary>
        /// 8-bit integer variables supported in StorageBuffer and Uniform
        /// </summary>
        internal Bool32 UniformAndStorageBuffer8BitAccess;
        /// <summary>
        /// 8-bit integer variables supported in PushConstant
        /// </summary>
        internal Bool32 StoragePushConstant8;
    }

    internal partial struct PhysicalDeviceConditionalRenderingFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ConditionalRendering;
        internal Bool32 InheritedConditionalRendering;
    }

    internal partial struct PhysicalDeviceVulkanMemoryModelFeaturesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 VulkanMemoryModel;
        internal Bool32 VulkanMemoryModelDeviceScope;
        internal Bool32 VulkanMemoryModelAvailabilityVisibilityChains;
    }

    internal partial struct PhysicalDeviceShaderAtomicInt64FeaturesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ShaderBufferInt64Atomics;
        internal Bool32 ShaderSharedInt64Atomics;
    }

    internal partial struct PhysicalDeviceVertexAttributeDivisorFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 VertexAttributeInstanceRateDivisor;
        internal Bool32 VertexAttributeInstanceRateZeroDivisor;
    }

    internal partial struct QueueFamilyCheckpointPropertiesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineStageFlags CheckpointExecutionStageMask;
    }

    internal partial struct CheckpointDataNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineStageFlags Stage;
        internal IntPtr CheckpointMarker;
    }

    internal partial struct PhysicalDeviceDepthStencilResolvePropertiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// supported depth resolve modes
        /// </summary>
        internal ResolveModeFlagsKhr SupportedDepthResolveModes;
        /// <summary>
        /// supported stencil resolve modes
        /// </summary>
        internal ResolveModeFlagsKhr SupportedStencilResolveModes;
        /// <summary>
        /// depth and stencil resolve modes can be set independently if one of them is none
        /// </summary>
        internal Bool32 IndependentResolveNone;
        /// <summary>
        /// depth and stencil resolve modes can be set independently
        /// </summary>
        internal Bool32 IndependentResolve;
    }

    internal partial struct SubpassDescriptionDepthStencilResolveKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// depth resolve mode
        /// </summary>
        internal ResolveModeFlagsKhr DepthResolveMode;
        /// <summary>
        /// stencil resolve mode
        /// </summary>
        internal ResolveModeFlagsKhr StencilResolveMode;
        /// <summary>
        /// depth/stencil resolve attachment
        /// </summary>
        internal IntPtr DepthStencilResolveAttachment;
    }

    internal partial struct ImageViewASTCDecodeModeExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Format DecodeMode;
    }

    internal partial struct PhysicalDeviceASTCDecodeFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 DecodeModeSharedExponent;
    }

    internal partial struct PhysicalDeviceTransformFeedbackFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 TransformFeedback;
        internal Bool32 GeometryStreams;
    }

    internal partial struct PhysicalDeviceTransformFeedbackPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxTransformFeedbackStreams;
        internal UInt32 MaxTransformFeedbackBuffers;
        internal DeviceSize MaxTransformFeedbackBufferSize;
        internal UInt32 MaxTransformFeedbackStreamDataSize;
        internal UInt32 MaxTransformFeedbackBufferDataSize;
        internal UInt32 MaxTransformFeedbackBufferDataStride;
        internal Bool32 TransformFeedbackQueries;
        internal Bool32 TransformFeedbackStreamsLinesTriangles;
        internal Bool32 TransformFeedbackRasterizationStreamSelect;
        internal Bool32 TransformFeedbackDraw;
    }

    internal partial struct PipelineRasterizationStateStreamCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineRasterizationStateStreamCreateFlagsExt Flags;
        internal UInt32 RasterizationStream;
    }

    internal partial struct PhysicalDeviceRepresentativeFragmentTestFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 RepresentativeFragmentTest;
    }

    internal partial struct PipelineRepresentativeFragmentTestStateCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 RepresentativeFragmentTestEnable;
    }

    internal partial struct PhysicalDeviceExclusiveScissorFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ExclusiveScissor;
    }

    internal partial struct PipelineViewportExclusiveScissorStateCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 ExclusiveScissorCount;
        internal IntPtr ExclusiveScissors;
    }

    internal partial struct PhysicalDeviceCornerSampledImageFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 CornerSampledImage;
    }

    internal partial struct PhysicalDeviceComputeShaderDerivativesFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ComputeDerivativeGroupQuads;
        internal Bool32 ComputeDerivativeGroupLinear;
    }

    internal partial struct PhysicalDeviceFragmentShaderBarycentricFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 FragmentShaderBarycentric;
    }

    internal partial struct PhysicalDeviceShaderImageFootprintFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ImageFootprint;
    }

    internal partial struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 DedicatedAllocationImageAliasing;
    }

    internal partial struct ShadingRatePaletteNv
    {
        internal UInt32 ShadingRatePaletteEntryCount;
        internal IntPtr ShadingRatePaletteEntries;
    }

    internal partial struct PipelineViewportShadingRateImageStateCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ShadingRateImageEnable;
        internal UInt32 ViewportCount;
        internal IntPtr ShadingRatePalettes;
    }

    internal partial struct PhysicalDeviceShadingRateImageFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ShadingRateImage;
        internal Bool32 ShadingRateCoarseSampleOrder;
    }

    internal partial struct PhysicalDeviceShadingRateImagePropertiesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Extent2D ShadingRateTexelSize;
        internal UInt32 ShadingRatePaletteSize;
        internal UInt32 ShadingRateMaxCoarseSamples;
    }

    internal partial struct CoarseSampleOrderCustomNv
    {
        internal ShadingRatePaletteEntryNv ShadingRate;
        internal UInt32 SampleCount;
        internal UInt32 SampleLocationCount;
        internal IntPtr SampleLocations;
    }

    internal partial struct PipelineViewportCoarseSampleOrderStateCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal CoarseSampleOrderTypeNv SampleOrderType;
        internal UInt32 CustomSampleOrderCount;
        internal IntPtr CustomSampleOrders;
    }

    internal partial struct PhysicalDeviceMeshShaderFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 TaskShader;
        internal Bool32 MeshShader;
    }

    internal partial struct PhysicalDeviceMeshShaderPropertiesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 MaxDrawMeshTasksCount;
        internal UInt32 MaxTaskWorkGroupInvocations;
        internal unsafe fixed UInt32 MaxTaskWorkGroupSize[3];
        internal UInt32 MaxTaskTotalMemorySize;
        internal UInt32 MaxTaskOutputCount;
        internal UInt32 MaxMeshWorkGroupInvocations;
        internal unsafe fixed UInt32 MaxMeshWorkGroupSize[3];
        internal UInt32 MaxMeshTotalMemorySize;
        internal UInt32 MaxMeshOutputVertices;
        internal UInt32 MaxMeshOutputPrimitives;
        internal UInt32 MaxMeshMultiviewViewCount;
        internal UInt32 MeshOutputPerVertexGranularity;
        internal UInt32 MeshOutputPerPrimitiveGranularity;
    }

    internal partial struct RayTracingShaderGroupCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal RayTracingShaderGroupTypeNv Type;
        internal UInt32 GeneralShader;
        internal UInt32 ClosestHitShader;
        internal UInt32 AnyHitShader;
        internal UInt32 IntersectionShader;
    }

    internal partial struct RayTracingPipelineCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Pipeline creation flags
        /// </summary>
        internal PipelineCreateFlags Flags;
        internal UInt32 StageCount;
        /// <summary>
        /// One entry for each active shader stage
        /// </summary>
        internal IntPtr Stages;
        internal UInt32 GroupCount;
        internal IntPtr Groups;
        internal UInt32 MaxRecursionDepth;
        /// <summary>
        /// Interface layout of the pipeline
        /// </summary>
        internal UInt64 Layout;
        /// <summary>
        /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of
        /// </summary>
        internal UInt64 BasePipelineHandle;
        /// <summary>
        /// If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of
        /// </summary>
        internal Int32 BasePipelineIndex;
    }

    internal partial struct GeometryTrianglesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 VertexData;
        internal DeviceSize VertexOffset;
        internal UInt32 VertexCount;
        internal DeviceSize VertexStride;
        internal Format VertexFormat;
        internal UInt64 IndexData;
        internal DeviceSize IndexOffset;
        internal UInt32 IndexCount;
        internal IndexType IndexType;
        /// <summary>
        /// Optional reference to array of floats representing a 3x4 row major affine transformation matrix.
        /// </summary>
        internal UInt64 TransformData;
        internal DeviceSize TransformOffset;
    }

    internal partial struct GeometryAABBNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 AabbData;
        internal UInt32 NumAabbs;
        /// <summary>
        /// Stride in bytes between AABBs
        /// </summary>
        internal UInt32 Stride;
        /// <summary>
        /// Offset in bytes of the first AABB in aabbData
        /// </summary>
        internal DeviceSize Offset;
    }

    internal partial struct GeometryDataNv
    {
        internal GeometryTrianglesNv Triangles;
        internal GeometryAABBNv Aabbs;
    }

    internal partial struct GeometryNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal GeometryTypeNv GeometryType;
        internal GeometryDataNv Geometry;
        internal GeometryFlagsNv Flags;
    }

    internal partial struct AccelerationStructureInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal AccelerationStructureTypeNv Type;
        internal BuildAccelerationStructureFlagsNv Flags;
        internal UInt32 InstanceCount;
        internal UInt32 GeometryCount;
        internal IntPtr Geometries;
    }

    internal partial struct AccelerationStructureCreateInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceSize CompactedSize;
        internal AccelerationStructureInfoNv Info;
    }

    internal partial struct BindAccelerationStructureMemoryInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 AccelerationStructure;
        internal UInt64 Memory;
        internal DeviceSize MemoryOffset;
        internal UInt32 DeviceIndexCount;
        internal IntPtr DeviceIndices;
    }

    internal partial struct WriteDescriptorSetAccelerationStructureNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 AccelerationStructureCount;
        internal IntPtr AccelerationStructures;
    }

    internal partial struct AccelerationStructureMemoryRequirementsInfoNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal AccelerationStructureMemoryRequirementsTypeNv Type;
        internal UInt64 AccelerationStructure;
    }

    internal partial struct PhysicalDeviceRayTracingPropertiesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 ShaderGroupHandleSize;
        internal UInt32 MaxRecursionDepth;
        internal UInt32 MaxShaderGroupStride;
        internal UInt32 ShaderGroupBaseAlignment;
        internal UInt64 MaxGeometryCount;
        internal UInt64 MaxInstanceCount;
        internal UInt64 MaxTriangleCount;
        internal UInt32 MaxDescriptorSetAccelerationStructures;
    }

    internal partial struct DrmFormatModifierPropertiesListExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 DrmFormatModifierCount;
        internal IntPtr DrmFormatModifierProperties;
    }

    internal partial struct PhysicalDeviceImageDrmFormatModifierInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 DrmFormatModifier;
        internal SharingMode SharingMode;
        internal UInt32 QueueFamilyIndexCount;
        internal IntPtr QueueFamilyIndices;
    }

    internal partial struct ImageDrmFormatModifierListCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 DrmFormatModifierCount;
        internal IntPtr DrmFormatModifiers;
    }

    internal partial struct ImageDrmFormatModifierExplicitCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 DrmFormatModifier;
        internal UInt32 DrmFormatModifierPlaneCount;
        internal IntPtr PlaneLayouts;
    }

    internal partial struct ImageDrmFormatModifierPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 DrmFormatModifier;
    }

    internal partial struct ImageStencilUsageCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ImageUsageFlags StencilUsage;
    }

    internal partial struct DeviceMemoryOverallocationCreateInfoAmd
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal MemoryOverallocationBehaviorAmd OverallocationBehavior;
    }

    internal partial struct PhysicalDeviceFragmentDensityMapFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 FragmentDensityMap;
        internal Bool32 FragmentDensityMapDynamic;
        internal Bool32 FragmentDensityMapNonSubsampledImages;
    }

    internal partial struct PhysicalDeviceFragmentDensityMapPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Extent2D MinFragmentDensityTexelSize;
        internal Extent2D MaxFragmentDensityTexelSize;
        internal Bool32 FragmentDensityInvocations;
    }

    internal partial struct RenderPassFragmentDensityMapCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal AttachmentReference FragmentDensityMapAttachment;
    }

    internal partial struct PhysicalDeviceScalarBlockLayoutFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 ScalarBlockLayout;
    }

    internal partial struct SurfaceProtectedCapabilitiesKhr
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Represents if surface can be protected
        /// </summary>
        internal Bool32 SupportsProtected;
    }

    internal partial struct PhysicalDeviceDepthClipEnableFeaturesExt
    {
        internal StructureType SType;
        /// <summary>
        /// Pointer to next structure
        /// </summary>
        internal IntPtr Next;
        internal Bool32 DepthClipEnable;
    }

    internal partial struct PipelineRasterizationDepthClipStateCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal PipelineRasterizationDepthClipStateCreateFlagsExt Flags;
        internal Bool32 DepthClipEnable;
    }

    internal partial struct PhysicalDeviceMemoryPriorityFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 MemoryPriority;
    }

    internal partial struct MemoryPriorityAllocateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal float Priority;
    }

    internal partial struct PhysicalDeviceBufferDeviceAddressFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 BufferDeviceAddress;
        internal Bool32 BufferDeviceAddressCaptureReplay;
        internal Bool32 BufferDeviceAddressMultiDevice;
    }

    internal partial struct BufferDeviceAddressInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 Buffer;
    }

    internal partial struct BufferDeviceAddressCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal DeviceAddress DeviceAddress;
    }

    internal partial struct PhysicalDeviceImageViewImageFormatInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ImageViewType ImageViewType;
    }

    internal partial struct FilterCubicImageViewImageFormatPropertiesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 FilterCubic;
        internal Bool32 FilterCubicMinmax;
    }

    internal partial struct PhysicalDeviceCooperativeMatrixFeaturesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 CooperativeMatrix;
        internal Bool32 CooperativeMatrixRobustBufferAccess;
    }

    internal partial struct PhysicalDeviceCooperativeMatrixPropertiesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal ShaderStageFlags CooperativeMatrixSupportedStages;
    }

    internal partial struct CooperativeMatrixPropertiesNv
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt32 Msize;
        internal UInt32 Nsize;
        internal UInt32 Ksize;
        internal ComponentTypeNv Atype;
        internal ComponentTypeNv Btype;
        internal ComponentTypeNv Ctype;
        internal ComponentTypeNv Dtype;
        internal ScopeNv Scope;
    }

    internal partial struct PhysicalDeviceYcbcrImageArraysFeaturesExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 YcbcrImageArrays;
    }

    internal partial struct ImageViewHandleInfoNvx
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal UInt64 ImageView;
        internal DescriptorType DescriptorType;
        internal UInt64 Sampler;
    }

    internal partial struct PipelineCreationFeedbackCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        /// <summary>
        /// Output pipeline creation feedback.
        /// </summary>
        internal IntPtr PipelineCreationFeedback;
        internal UInt32 PipelineStageCreationFeedbackCount;
        /// <summary>
        /// One entry for each shader stage specified in the parent Vk*PipelineCreateInfo struct
        /// </summary>
        internal IntPtr PipelineStageCreationFeedbacks;
    }

    internal partial struct SurfaceFullScreenExclusiveInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal FullScreenExclusiveExt FullScreenExclusive;
    }

    internal partial struct SurfaceFullScreenExclusiveWin32InfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal IntPtr Hmonitor;
    }

    internal partial struct SurfaceCapabilitiesFullScreenExclusiveExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal Bool32 FullScreenExclusiveSupported;
    }

    internal partial struct HeadlessSurfaceCreateInfoExt
    {
        internal StructureType SType;
        internal IntPtr Next;
        internal HeadlessSurfaceCreateFlagsExt Flags;
    }
}

