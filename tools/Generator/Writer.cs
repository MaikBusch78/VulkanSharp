using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace VulkanSharp.Generator
{
    public class Writer
    {
        string writerPath;
        StreamWriter writerStream;
        List<string> writerContentList;

        public static bool WriterKindList = false;
        public static bool IndentationKindVisualStudio = false;

        void WriteLicensingInformation()
        {
            WriteLine("    Licensed under the MIT license.");
            WriteLine();
            WriteLine("    Copyright 2016 Xamarin Inc");
            WriteLine();
            WriteLine("    This notice may not be removed from any source distribution.");
            WriteLine("    See LICENSE file for licensing details.");
        }

        public Writer(string outputPath, UsingNamespaceFlags namespaces = 0, string nspace = "Vulkan")
        {
            writerPath = outputPath;

            Directory.CreateDirectory(Path.GetDirectoryName(writerPath));

            WriterKindList |= IndentationKindVisualStudio;

            if (WriterKindList == false)
            {
                writerStream = new StreamWriter(writerPath);
            }
            else
            {
                writerContentList = new List<string>();
                writerContentList.Add("");
            }

            WriteLine("/*  Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.");
            WriteLine();
            WriteLicensingInformation();
            WriteLine("*/");
            WriteLine();
            WriteLine("using System;");
            if ((namespaces & UsingNamespaceFlags.Interop) != 0)
                WriteLine("using System.Runtime.InteropServices;");
            if ((namespaces & UsingNamespaceFlags.Collections) != 0)
                WriteLine("using System.Collections.Generic;");
            if ((namespaces & UsingNamespaceFlags.Vulkan) != 0)
                WriteLine("using Vulkan;");
            if ((namespaces & UsingNamespaceFlags.VulkanInterop) != 0)
                WriteLine("using Vulkan.Interop;");
            WriteLine();

            WriteLine("namespace {0}", nspace);
            IndentWriteLineBraceOpen();
        }

        public void FinalizeFile()
        {
            IndentWriteLineBraceClose();

            if (WriterKindList == false)
            {
                writerStream.Close();

                writerStream = null;
            }
            else
            {
                Directory.CreateDirectory(Path.GetDirectoryName(writerPath));

                if (IndentationKindVisualStudio)
                {
                    var contentToWrite = new List<string>(writerContentList.Count);

                    foreach (var str in writerContentList)
                    {
                        var line = str;

                        line = line.Replace(" (", "(");
                        line = line.Replace("if(", "if (");
                        line = line.Replace("for(", "for (");
                        line = line.Replace("fixed(", "fixed (");
                        line = line.Replace("return(", "return (");
                        line = line.Replace("?(", "? (");
                        line = line.Replace(":(", ": (");
                        line = line.Replace(",(", ", (");
                        line = line.Replace("=(", "= (");
                        line = line.Replace(" [", "[");

                        if (line.StartsWith(" "))
                        {
                            for (int i = 0; i < line.Length; i++)
                            {
                                if (line[i] != ' ')
                                {
                                    if (i % 4 != 0)
                                    {
                                        do { i++; } while (i % 4 != 0);

                                        line = new string(Enumerable.Repeat(' ', i).ToArray()) + line.TrimStart(' ');
                                    }

                                    break;
                                }
                            }
                        }

                        contentToWrite.Add(line);
                    }


                    File.WriteAllLines(writerPath, contentToWrite.ToArray());
                }
                else
                {
                    File.WriteAllLines(writerPath, writerContentList.ToArray());
                }

                writerContentList = null;
            }
        }

        public int IndentLevel = 0;

        private string Indentation()
        {
            if (IndentLevel == 0) return "";
            var indent = IndentationKindVisualStudio == false ? "\t" : "    ";
            return Enumerable.Repeat(indent, IndentLevel).Aggregate((a, b) => a + b);
        }

        public void IndentWriteLineBraceOpen()
        {
            IndentWriteLine("{");
            IndentLevel++;
        }

        public void IndentWriteLineBraceClose()
        {
            IndentLevel--;
            IndentWriteLine("}");
        }

        public void Write(string str)
        {
            if (WriterKindList == false)
            {
                writerStream.Write(str);
            }
            else
            {
                writerContentList[writerContentList.Count - 1] += str;
            }
        }

        public void Write(string str, params object[] args)
        {
            Write(string.Format(str, args));
        }

        public void WriteLine()
        {
            WriteLine("");
        }

        public void WriteLine(string str)
        {
            if (WriterKindList == false)
            {
                writerStream.WriteLine(str);
            }
            else
            {
                if (str.Length > 0)
                {
                    writerContentList[writerContentList.Count - 1] += str;
                }

                writerContentList.Add("");
            }
        }

        public void WriteLine(string str, params object[] args)
        {
            WriteLine(string.Format(str, args));
        }

        public void IndentWrite(string str)
        {
            Write(Indentation() + str);
        }

        public void IndentWrite(string str, params object[] args)
        {
            Write(Indentation() + string.Format(str, args));
        }

        public void IndentWriteLine(string str)
        {
            WriteLine(Indentation() + str);
        }

        public void IndentWriteLine(string format, params object[] args)
        {
            var str = string.Format(format, args);

            WriteLine(Indentation() + str);
        }
    }
}
